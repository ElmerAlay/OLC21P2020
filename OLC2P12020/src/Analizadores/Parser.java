
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import structs.AST;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\007\006\000" +
    "\002\007\010\000\002\007\005\000\002\007\007\000\002" +
    "\010\005\000\002\010\003\000\002\004\005\000\002\004" +
    "\006\000\002\011\006\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\041\011\001\002\000\010\002\ufffc\033" +
    "\123\041\ufffc\001\002\000\006\002\ufffe\041\ufffe\001\002" +
    "\000\010\002\ufffa\033\122\041\ufffa\001\002\000\006\002" +
    "\000\041\011\001\002\000\004\002\120\001\002\000\010" +
    "\012\015\014\013\034\012\001\002\000\026\005\023\012" +
    "\021\026\020\027\024\030\027\031\026\036\030\037\031" +
    "\040\022\041\017\001\002\000\030\005\023\012\021\014" +
    "\111\026\020\027\024\030\027\031\026\036\030\037\031" +
    "\040\022\041\017\001\002\000\006\014\100\034\107\001" +
    "\002\000\030\005\023\012\021\013\016\026\020\027\024" +
    "\030\027\031\026\036\030\037\031\040\022\041\017\001" +
    "\002\000\052\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\033\uffd6" +
    "\035\uffd6\041\uffd6\001\002\000\056\002\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\015\013\uffe2" +
    "\014\013\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\033\uffe2\035\uffe2\041\uffe2" +
    "\001\002\000\026\005\023\012\021\026\020\027\024\030" +
    "\027\031\026\036\030\037\031\040\022\041\017\001\002" +
    "\000\026\005\023\012\021\026\020\027\024\030\027\031" +
    "\026\036\030\037\031\040\022\041\017\001\002\000\052" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\033\uffe6\035\uffe6\041" +
    "\uffe6\001\002\000\026\005\023\012\021\026\020\027\024" +
    "\030\027\031\026\036\030\037\031\040\022\041\017\001" +
    "\002\000\052\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\033\uffe3" +
    "\035\uffe3\041\uffe3\001\002\000\006\013\071\035\070\001" +
    "\002\000\052\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\033\uffe4" +
    "\035\uffe4\041\uffe4\001\002\000\052\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\033\uffe5\035\uffe5\041\uffe5\001\002\000\052" +
    "\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\033\uffe8\035\uffe8\041" +
    "\uffe8\001\002\000\052\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\013\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\033\uffe7\035\uffe7\041\uffe7\001\002\000\042\004\043\005" +
    "\037\006\036\007\034\010\045\011\046\013\uffda\016\035" +
    "\017\040\020\044\021\047\022\051\023\050\024\041\025" +
    "\042\035\uffda\001\002\000\052\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\033\uffe0\035\uffe0\041\uffe0\001\002\000\026\005" +
    "\023\012\021\026\020\027\024\030\027\031\026\036\030" +
    "\037\031\040\022\041\017\001\002\000\026\005\023\012" +
    "\021\026\020\027\024\030\027\031\026\036\030\037\031" +
    "\040\022\041\017\001\002\000\026\005\023\012\021\026" +
    "\020\027\024\030\027\031\026\036\030\037\031\040\022" +
    "\041\017\001\002\000\026\005\023\012\021\026\020\027" +
    "\024\030\027\031\026\036\030\037\031\040\022\041\017" +
    "\001\002\000\026\005\023\012\021\026\020\027\024\030" +
    "\027\031\026\036\030\037\031\040\022\041\017\001\002" +
    "\000\026\005\023\012\021\026\020\027\024\030\027\031" +
    "\026\036\030\037\031\040\022\041\017\001\002\000\026" +
    "\005\023\012\021\026\020\027\024\030\027\031\026\036" +
    "\030\037\031\040\022\041\017\001\002\000\026\005\023" +
    "\012\021\026\020\027\024\030\027\031\026\036\030\037" +
    "\031\040\022\041\017\001\002\000\026\005\023\012\021" +
    "\026\020\027\024\030\027\031\026\036\030\037\031\040" +
    "\022\041\017\001\002\000\026\005\023\012\021\026\020" +
    "\027\024\030\027\031\026\036\030\037\031\040\022\041" +
    "\017\001\002\000\026\005\023\012\021\026\020\027\024" +
    "\030\027\031\026\036\030\037\031\040\022\041\017\001" +
    "\002\000\026\005\023\012\021\026\020\027\024\030\027" +
    "\031\026\036\030\037\031\040\022\041\017\001\002\000" +
    "\026\005\023\012\021\026\020\027\024\030\027\031\026" +
    "\036\030\037\031\040\022\041\017\001\002\000\026\005" +
    "\023\012\021\026\020\027\024\030\027\031\026\036\030" +
    "\037\031\040\022\041\017\001\002\000\052\002\uffed\004" +
    "\043\005\037\006\036\007\034\010\045\011\046\013\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\033\uffed\035\uffed\041\uffed\001\002" +
    "\000\052\002\uffec\004\043\005\037\006\036\007\034\010" +
    "\045\011\046\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\033\uffec\035" +
    "\uffec\041\uffec\001\002\000\052\002\uffee\004\043\005\037" +
    "\006\036\007\034\010\045\011\046\013\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\033\uffee\035\uffee\041\uffee\001\002\000\052\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\045\011\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\033\ufff5\035\ufff5\041\ufff5" +
    "\001\002\000\052\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\033" +
    "\ufff4\035\ufff4\041\ufff4\001\002\000\052\002\uffef\004\043" +
    "\005\037\006\036\007\034\010\045\011\046\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\033\uffef\035\uffef\041\uffef\001\002\000" +
    "\052\002\ufff9\004\ufff9\005\ufff9\006\036\007\034\010\045" +
    "\011\046\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\033\ufff9\035\ufff9" +
    "\041\ufff9\001\002\000\052\002\uffea\004\043\005\037\006" +
    "\036\007\034\010\045\011\046\013\uffea\015\uffea\016\035" +
    "\017\040\020\044\021\047\022\051\023\050\024\uffea\025" +
    "\uffea\033\uffea\035\uffea\041\uffea\001\002\000\052\002\uffeb" +
    "\004\043\005\037\006\036\007\034\010\045\011\046\013" +
    "\uffeb\015\uffeb\016\035\017\040\020\044\021\047\022\051" +
    "\023\050\024\uffeb\025\042\033\uffeb\035\uffeb\041\uffeb\001" +
    "\002\000\052\002\ufff0\004\043\005\037\006\036\007\034" +
    "\010\045\011\046\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\033\ufff0" +
    "\035\ufff0\041\ufff0\001\002\000\052\002\ufff8\004\ufff8\005" +
    "\ufff8\006\036\007\034\010\045\011\046\013\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\033\ufff8\035\ufff8\041\ufff8\001\002\000\052" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\045\011" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\033\ufff7\035\ufff7\041" +
    "\ufff7\001\002\000\052\002\ufff1\004\043\005\037\006\036" +
    "\007\034\010\045\011\046\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\033\ufff1\035\ufff1\041\ufff1\001\002\000\052\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\045\011\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\033\ufff6\035\ufff6\041\ufff6\001\002" +
    "\000\026\005\023\012\021\026\020\027\024\030\027\031" +
    "\026\036\030\037\031\040\022\041\017\001\002\000\052" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\033\uffd7\035\uffd7\041" +
    "\uffd7\001\002\000\042\004\043\005\037\006\036\007\034" +
    "\010\045\011\046\013\uffdb\016\035\017\040\020\044\021" +
    "\047\022\051\023\050\024\041\025\042\035\uffdb\001\002" +
    "\000\052\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\033\ufff3\035" +
    "\ufff3\041\ufff3\001\002\000\040\004\043\005\037\006\036" +
    "\007\034\010\045\011\046\013\075\016\035\017\040\020" +
    "\044\021\047\022\051\023\050\024\041\025\042\001\002" +
    "\000\052\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\033\ufff2\035" +
    "\ufff2\041\ufff2\001\002\000\052\002\uffe9\004\043\005\037" +
    "\006\036\007\034\010\045\011\046\013\uffe9\015\uffe9\016" +
    "\035\017\040\020\044\021\047\022\051\023\050\024\uffe9" +
    "\025\uffe9\033\uffe9\035\uffe9\041\uffe9\001\002\000\054\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\013\uffe1\014\100\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\033\uffe1\035\uffe1" +
    "\041\uffe1\001\002\000\030\005\023\012\021\014\101\026" +
    "\020\027\024\030\027\031\026\036\030\037\031\040\022" +
    "\041\017\001\002\000\026\005\023\012\021\026\020\027" +
    "\024\030\027\031\026\036\030\037\031\040\022\041\017" +
    "\001\002\000\040\004\043\005\037\006\036\007\034\010" +
    "\045\011\046\015\103\016\035\017\040\020\044\021\047" +
    "\022\051\023\050\024\041\025\042\001\002\000\056\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\041\uffdf\001\002\000\040\004\043\005\037\006" +
    "\036\007\034\010\045\011\046\015\105\016\035\017\040" +
    "\020\044\021\047\022\051\023\050\024\041\025\042\001" +
    "\002\000\004\015\106\001\002\000\056\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\033\uffde\034\uffde\035\uffde\041" +
    "\uffde\001\002\000\026\005\023\012\021\026\020\027\024" +
    "\030\027\031\026\036\030\037\031\040\022\041\017\001" +
    "\002\000\044\002\uffd8\004\043\005\037\006\036\007\034" +
    "\010\045\011\046\016\035\017\040\020\044\021\047\022" +
    "\051\023\050\024\041\025\042\033\uffd8\041\uffd8\001\002" +
    "\000\026\005\023\012\021\026\020\027\024\030\027\031" +
    "\026\036\030\037\031\040\022\041\017\001\002\000\040" +
    "\004\043\005\037\006\036\007\034\010\045\011\046\015" +
    "\113\016\035\017\040\020\044\021\047\022\051\023\050" +
    "\024\041\025\042\001\002\000\056\002\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd" +
    "\001\002\000\040\004\043\005\037\006\036\007\034\010" +
    "\045\011\046\015\115\016\035\017\040\020\044\021\047" +
    "\022\051\023\050\024\041\025\042\001\002\000\004\015" +
    "\116\001\002\000\056\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\033\uffdc\034\uffdc\035\uffdc\041\uffdc\001\002\000" +
    "\044\002\uffd9\004\043\005\037\006\036\007\034\010\045" +
    "\011\046\016\035\017\040\020\044\021\047\022\051\023" +
    "\050\024\041\025\042\033\uffd9\041\uffd9\001\002\000\004" +
    "\002\001\001\002\000\006\002\uffff\041\uffff\001\002\000" +
    "\006\002\ufffb\041\ufffb\001\002\000\006\002\ufffd\041\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\007\004\003\005\004\006\006\011" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\003\005\120\011\005\001\001\000" +
    "\002\001\001\000\004\007\013\001\001\000\006\003\116" +
    "\011\032\001\001\000\006\003\111\011\032\001\001\000" +
    "\002\001\001\000\010\003\031\010\024\011\032\001\001" +
    "\000\002\001\001\000\004\007\076\001\001\000\006\003" +
    "\075\011\032\001\001\000\006\003\073\011\032\001\001" +
    "\000\002\001\001\000\006\003\072\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\066\011\032\001\001" +
    "\000\006\003\065\011\032\001\001\000\006\003\064\011" +
    "\032\001\001\000\006\003\063\011\032\001\001\000\006" +
    "\003\062\011\032\001\001\000\006\003\061\011\032\001" +
    "\001\000\006\003\060\011\032\001\001\000\006\003\057" +
    "\011\032\001\001\000\006\003\056\011\032\001\001\000" +
    "\006\003\055\011\032\001\001\000\006\003\054\011\032" +
    "\001\001\000\006\003\053\011\032\001\001\000\006\003" +
    "\052\011\032\001\001\000\006\003\051\011\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\071\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\101\011\032\001\001\000\006\003\103" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\107\011\032\001\001\000\002\001\001\000\006\003" +
    "\113\011\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static AST root; //representa la raíz del árbol AST de la gramática
    public static int cont = 0;    //Contador para llevar control de los id´s de los nodos

    //Método para recuperación de errores
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico recuperado !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }

    //Método cuando ya no es posible la recuperación de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico, Panic mode !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        AST nd = new AST();
                        nd.setLabel("INICIO");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)r);

                        Parser.root = (AST) nd;
                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              Object RESULT =null;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        AST nd = new AST();
                                        nd.setLabel("LINST");
                                        nd.setIdNode(Parser.cont++);
                                        nd.addChildren((AST)linst);
                                        nd.addChildren((AST)inst);

                                        RESULT = nd;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("LINST");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)inst);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= ASIGN pyc 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = (AST)asig;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= ASIGN 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = (AST)asig;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= LLAMAD pyc 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = (AST)llamad;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= LLAMAD 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)llamad;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E plus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("+");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= E minus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("-");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= E mul E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("*");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= E div E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("/");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= E mod E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("%%");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E pot E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("^");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= minus E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("-");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= ipar E fpar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            AST nd = new AST();
                            nd.setLabel("( )");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)e);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E gt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E lt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E gte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E lte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E eq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("==");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E neq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E or E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("|");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E and E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("&");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= not E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Integer");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(num);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= flotante 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Numerico");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(fl);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("String");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(cad);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= verdadero 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("True");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("true");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= falso 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("False");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("false");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= nulo 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("Null");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("null");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= id 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    AST nd = new AST();
                    nd.setLabel("Ref");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue(val);

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= id LCOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Struct");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);
                                nd.addChildren((AST)lcor);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= LLAMAD 
            {
              Object RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)llam;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LCOR ::= LCOR icor E fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lcor);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LCOR ::= LCOR icor icor E fcor fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                    AST n = new AST();
                                                    n.setLabel("LCOR2");
                                                    n.setIdNode(Parser.cont++);
                                                    n.addChildren((AST)exp);

                                                    AST nd = new AST();
                                                    nd.setLabel("LCOR");
                                                    nd.setIdNode(Parser.cont++);
                                                    nd.addChildren((AST)lcor);
                                                    nd.addChildren((AST)n);

                                                    RESULT = nd;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCOR ::= icor E fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                AST nd = new AST();
                                nd.setLabel("LCOR");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)exp);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LCOR ::= icor icor E fcor fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LPARAM ::= LPARAM colon E 
            {
              Object RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LPARAM");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lparam);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LPARAM ::= E 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("LPARAM");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)exp);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGN ::= id asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    AST ch1 = new AST();
                                    ch1.setLabel("ID");
                                    ch1.setIdNode(Parser.cont++);
                                    ch1.setValue(n);

                                    AST nd = new AST();
                                    nd.setLabel("ASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.addChildren(ch1);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGN ::= id LCOR asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST ch1 = new AST();
                                            ch1.setLabel("ID");
                                            ch1.setIdNode(Parser.cont++);
                                            ch1.setValue(n);

                                            AST nd = new AST();
                                            nd.setLabel("ASIGN");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(ch1);
                                            nd.addChildren((AST)index);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAMAD ::= id ipar LPARAM fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("Llam");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)lparam);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMAD ::= id ipar fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Llam");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);

                                RESULT = nd;   
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
