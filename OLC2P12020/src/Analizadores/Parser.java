
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import structs.AST;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\007\000\002\007\006\000\002\007" +
    "\010\000\002\007\005\000\002\007\007\000\002\010\005" +
    "\000\002\010\003\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\011\006\000\002\011\005\000\002" +
    "\012\010\000\002\012\007\000\002\012\007\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\013\011" +
    "\000\002\013\015\000\002\013\016\000\002\013\012\000" +
    "\002\015\004\000\002\015\003\000\002\014\012\000\002" +
    "\016\014\000\002\016\011\000\002\017\007\000\002\017" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\016\020\011\022\005\036\014\037\010\040" +
    "\021\055\004\001\002\000\010\012\113\014\111\047\221" +
    "\001\002\000\004\012\177\001\002\000\004\002\176\001" +
    "\002\000\026\002\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\055\ufffe\001\002\000" +
    "\030\002\uffca\017\uffca\020\uffca\022\uffca\023\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\046\uffca\055\uffca\001\002\000" +
    "\004\012\146\001\002\000\004\047\027\001\002\000\030" +
    "\002\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\046\026\055\ufffc\001\002\000\030" +
    "\002\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\046\uffcb\055\uffcb\001\002\000\026" +
    "\002\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\055\ufff9\001\002\000\030\002\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\023\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\046\025\055\ufff6\001\002\000\026\002\ufff8" +
    "\017\ufff8\020\ufff8\022\ufff8\023\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\055\ufff8\001\002\000\020\002\000\020\011" +
    "\022\005\036\014\037\010\040\021\055\004\001\002\000" +
    "\030\002\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\046\uffc9\055\uffc9\001\002\000" +
    "\030\002\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\046\023\055\ufffa\001\002\000" +
    "\026\002\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\055\ufffb\001\002\000\026\002" +
    "\uffff\017\uffff\020\uffff\022\uffff\023\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\055\uffff\001\002\000\026\002\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\023\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\055\ufff7\001\002\000\026\002\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\023\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\055\ufffd\001\002\000\026\005\034\012\031\034\032\042" +
    "\033\043\036\044\037\052\041\053\043\054\035\055\030" +
    "\001\002\000\102\002\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\113\013\uffde\014\111\015\uffde" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\046\uffde\050\uffde\051" +
    "\uffde\055\uffde\001\002\000\026\005\034\012\031\034\032" +
    "\042\033\043\036\044\037\052\041\053\043\054\035\055" +
    "\030\001\002\000\026\005\034\012\031\034\032\042\033" +
    "\043\036\044\037\052\041\053\043\054\035\055\030\001" +
    "\002\000\076\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\046\uffdf\050\uffdf\051\uffdf\055\uffdf\001\002" +
    "\000\026\005\034\012\031\034\032\042\033\043\036\044" +
    "\037\052\041\053\043\054\035\055\030\001\002\000\076" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\046\uffe2\050\uffe2\051\uffe2\055\uffe2\001\002\000\076\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\013\uffe1\015\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\055\uffe1\001\002\000\076\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\055\uffe0\001\002\000\076\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\015\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\046\uffdb\050" +
    "\uffdb\051\uffdb\055\uffdb\001\002\000\076\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\046\uffe4\050\uffe4" +
    "\051\uffe4\055\uffe4\001\002\000\076\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\015\uffdc" +
    "\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\046\uffdc\050\uffdc\051" +
    "\uffdc\055\uffdc\001\002\000\076\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\046\uffe3\050\uffe3\051\uffe3" +
    "\055\uffe3\001\002\000\066\002\uffd1\004\055\005\051\006" +
    "\050\007\045\010\057\011\061\017\uffd1\020\uffd1\022\uffd1" +
    "\023\uffd1\024\046\025\052\026\056\027\060\030\063\031" +
    "\062\032\053\033\054\035\047\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\046\uffd1\055\uffd1\001\002\000\026\005\034\012" +
    "\031\034\032\042\033\043\036\044\037\052\041\053\043" +
    "\054\035\055\030\001\002\000\026\005\034\012\031\034" +
    "\032\042\033\043\036\044\037\052\041\053\043\054\035" +
    "\055\030\001\002\000\026\005\034\012\031\034\032\042" +
    "\033\043\036\044\037\052\041\053\043\054\035\055\030" +
    "\001\002\000\026\005\034\012\031\034\032\042\033\043" +
    "\036\044\037\052\041\053\043\054\035\055\030\001\002" +
    "\000\026\005\034\012\031\034\032\042\033\043\036\044" +
    "\037\052\041\053\043\054\035\055\030\001\002\000\026" +
    "\005\034\012\031\034\032\042\033\043\036\044\037\052" +
    "\041\053\043\054\035\055\030\001\002\000\026\005\034" +
    "\012\031\034\032\042\033\043\036\044\037\052\041\053" +
    "\043\054\035\055\030\001\002\000\026\005\034\012\031" +
    "\034\032\042\033\043\036\044\037\052\041\053\043\054" +
    "\035\055\030\001\002\000\026\005\034\012\031\034\032" +
    "\042\033\043\036\044\037\052\041\053\043\054\035\055" +
    "\030\001\002\000\026\005\034\012\031\034\032\042\033" +
    "\043\036\044\037\052\041\053\043\054\035\055\030\001" +
    "\002\000\026\005\034\012\031\034\032\042\033\043\036" +
    "\044\037\052\041\053\043\054\035\055\030\001\002\000" +
    "\026\005\034\012\031\034\032\042\033\043\036\044\037" +
    "\052\041\053\043\054\035\055\030\001\002\000\026\005" +
    "\034\012\031\034\032\042\033\043\036\044\037\052\041" +
    "\053\043\054\035\055\030\001\002\000\026\005\034\012" +
    "\031\034\032\042\033\043\036\044\037\052\041\053\043" +
    "\054\035\055\030\001\002\000\026\005\034\012\031\034" +
    "\032\042\033\043\036\044\037\052\041\053\043\054\035" +
    "\055\030\001\002\000\076\002\uffe9\004\055\005\051\006" +
    "\050\007\045\010\057\011\061\013\uffe9\015\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\046\uffe9\050\uffe9\051\uffe9\055" +
    "\uffe9\001\002\000\076\002\uffe8\004\055\005\051\006\050" +
    "\007\045\010\057\011\061\013\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\046\uffe8\050\uffe8\051\uffe8\055\uffe8" +
    "\001\002\000\076\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\057\011\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\046\ufff1\050\ufff1\051\ufff1\055\ufff1\001" +
    "\002\000\076\002\uffea\004\055\005\051\006\050\007\045" +
    "\010\057\011\061\013\uffea\015\uffea\017\uffea\020\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\046\uffea\050\uffea\051\uffea\055\uffea\001\002" +
    "\000\076\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\013\ufff0\015\ufff0\017\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\046\ufff0\050\ufff0\051\ufff0\055\ufff0\001\002\000" +
    "\076\002\uffeb\004\055\005\051\006\050\007\045\010\057" +
    "\011\061\013\uffeb\015\uffeb\017\uffeb\020\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\046\uffeb\050\uffeb\051\uffeb\055\uffeb\001\002\000\076" +
    "\002\ufff5\004\ufff5\005\ufff5\006\050\007\045\010\057\011" +
    "\061\013\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\046\ufff5\050\ufff5\051\ufff5\055\ufff5\001\002\000\076\002" +
    "\uffe6\004\055\005\051\006\050\007\045\010\057\011\061" +
    "\013\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024" +
    "\046\025\052\026\056\027\060\030\063\031\062\032\uffe6" +
    "\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\046" +
    "\uffe6\050\uffe6\051\uffe6\055\uffe6\001\002\000\076\002\uffe7" +
    "\004\055\005\051\006\050\007\045\010\057\011\061\013" +
    "\uffe7\015\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\046" +
    "\025\052\026\056\027\060\030\063\031\062\032\uffe7\033" +
    "\054\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\046\uffe7" +
    "\050\uffe7\051\uffe7\055\uffe7\001\002\000\076\002\uffec\004" +
    "\055\005\051\006\050\007\045\010\057\011\061\013\uffec" +
    "\015\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\046\uffec\050" +
    "\uffec\051\uffec\055\uffec\001\002\000\076\002\ufff4\004\ufff4" +
    "\005\ufff4\006\050\007\045\010\057\011\061\013\ufff4\015" +
    "\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\046\ufff4\050\ufff4" +
    "\051\ufff4\055\ufff4\001\002\000\076\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\057\011\ufff3\013\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\046\ufff3\050\ufff3\051" +
    "\ufff3\055\ufff3\001\002\000\042\004\055\005\051\006\050" +
    "\007\045\010\057\011\061\024\046\025\052\026\056\027" +
    "\060\030\063\031\062\032\053\033\054\035\047\051\101" +
    "\001\002\000\026\005\034\012\031\034\032\042\033\043" +
    "\036\044\037\052\041\053\043\054\035\055\030\001\002" +
    "\000\076\002\uffda\004\055\005\051\006\050\007\045\010" +
    "\057\011\061\013\uffda\015\uffda\017\uffda\020\uffda\022\uffda" +
    "\023\uffda\024\046\025\052\026\056\027\060\030\063\031" +
    "\062\032\053\033\054\035\047\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\046\uffda\050\uffda\051\uffda\055\uffda\001\002\000" +
    "\076\002\uffed\004\055\005\051\006\050\007\045\010\057" +
    "\011\061\013\uffed\015\uffed\017\uffed\020\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\046\uffed\050\uffed\051\uffed\055\uffed\001\002\000\076" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\057\011" +
    "\ufff2\013\ufff2\015\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\046\ufff2\050\ufff2\051\ufff2\055\ufff2\001\002\000\076\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\015\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\046" +
    "\uffef\050\uffef\051\uffef\055\uffef\001\002\000\076\002\uffe5" +
    "\004\055\005\051\006\050\007\045\010\057\011\061\013" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024\046" +
    "\025\052\026\056\027\060\030\063\031\062\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\046\uffe5" +
    "\050\uffe5\051\uffe5\055\uffe5\001\002\000\042\004\055\005" +
    "\051\006\050\007\045\010\057\011\061\013\110\024\046" +
    "\025\052\026\056\027\060\030\063\031\062\032\053\033" +
    "\054\035\047\001\002\000\076\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee\015\uffee\017" +
    "\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\046\uffee\050\uffee\051\uffee" +
    "\055\uffee\001\002\000\032\005\034\012\031\014\132\034" +
    "\032\042\033\043\036\044\037\050\131\052\041\053\043" +
    "\054\035\055\030\001\002\000\100\002\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\122" +
    "\015\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\046\uffdd\050" +
    "\uffdd\051\uffdd\055\uffdd\001\002\000\030\005\034\012\031" +
    "\013\114\034\032\042\033\043\036\044\037\052\041\053" +
    "\043\054\035\055\030\001\002\000\076\002\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\015" +
    "\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\046\uffcf\050\uffcf" +
    "\051\uffcf\055\uffcf\001\002\000\006\013\120\050\117\001" +
    "\002\000\044\004\055\005\051\006\050\007\045\010\057" +
    "\011\061\013\uffd4\024\046\025\052\026\056\027\060\030" +
    "\063\031\062\032\053\033\054\035\047\050\uffd4\001\002" +
    "\000\026\005\034\012\031\034\032\042\033\043\036\044" +
    "\037\052\041\053\043\054\035\055\030\001\002\000\076" +
    "\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\046\uffd0\050\uffd0\051\uffd0\055\uffd0\001\002\000\044\004" +
    "\055\005\051\006\050\007\045\010\057\011\061\013\uffd5" +
    "\024\046\025\052\026\056\027\060\030\063\031\062\032" +
    "\053\033\054\035\047\050\uffd5\001\002\000\030\005\034" +
    "\012\031\014\123\034\032\042\033\043\036\044\037\052" +
    "\041\053\043\054\035\055\030\001\002\000\026\005\034" +
    "\012\031\034\032\042\033\043\036\044\037\052\041\053" +
    "\043\054\035\055\030\001\002\000\042\004\055\005\051" +
    "\006\050\007\045\010\057\011\061\015\125\024\046\025" +
    "\052\026\056\027\060\030\063\031\062\032\053\033\054" +
    "\035\047\001\002\000\102\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\055\uffd9\001\002\000\042\004\055\005\051" +
    "\006\050\007\045\010\057\011\061\015\127\024\046\025" +
    "\052\026\056\027\060\030\063\031\062\032\053\033\054" +
    "\035\047\001\002\000\004\015\130\001\002\000\102\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\055\uffd8\001\002" +
    "\000\026\005\034\012\031\034\032\042\033\043\036\044" +
    "\037\052\041\053\043\054\035\055\030\001\002\000\026" +
    "\005\034\012\031\034\032\042\033\043\036\044\037\052" +
    "\041\053\043\054\035\055\030\001\002\000\044\004\055" +
    "\005\051\006\050\007\045\010\057\011\061\015\134\024" +
    "\046\025\052\026\056\027\060\030\063\031\062\032\053" +
    "\033\054\035\047\050\135\001\002\000\102\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\055\uffd7\001\002\000\030" +
    "\005\034\012\031\015\136\034\032\042\033\043\036\044" +
    "\037\052\041\053\043\054\035\055\030\001\002\000\100" +
    "\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\055\uffcd\001\002\000" +
    "\042\004\055\005\051\006\050\007\045\010\057\011\061" +
    "\015\140\024\046\025\052\026\056\027\060\030\063\031" +
    "\062\032\053\033\054\035\047\001\002\000\100\002\uffce" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\013" +
    "\uffce\015\uffce\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\055\uffce\001\002\000\042\004" +
    "\055\005\051\006\050\007\045\010\057\011\061\015\142" +
    "\024\046\025\052\026\056\027\060\030\063\031\062\032" +
    "\053\033\054\035\047\001\002\000\004\015\143\001\002" +
    "\000\102\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\055" +
    "\uffd6\001\002\000\042\004\055\005\051\006\050\007\045" +
    "\010\057\011\061\015\145\024\046\025\052\026\056\027" +
    "\060\030\063\031\062\032\053\033\054\035\047\001\002" +
    "\000\100\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\055\uffcc\001" +
    "\002\000\026\005\034\012\031\034\032\042\033\043\036" +
    "\044\037\052\041\053\043\054\035\055\030\001\002\000" +
    "\042\004\055\005\051\006\050\007\045\010\057\011\061" +
    "\013\150\024\046\025\052\026\056\027\060\030\063\031" +
    "\062\032\053\033\054\035\047\001\002\000\004\016\151" +
    "\001\002\000\016\020\011\022\005\036\014\037\010\040" +
    "\021\055\004\001\002\000\020\017\153\020\011\022\005" +
    "\036\014\037\010\040\021\055\004\001\002\000\030\002" +
    "\uffc8\017\uffc8\020\uffc8\021\155\022\uffc8\023\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\055\uffc8\001\002\000\030\002" +
    "\uffc5\017\uffc5\020\uffc5\021\171\022\uffc5\023\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\055\uffc5\001\002\000\006\016" +
    "\160\020\157\001\002\000\030\002\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\055\uffc3\001\002\000\004\012\163\001\002\000\016" +
    "\020\011\022\005\036\014\037\010\040\021\055\004\001" +
    "\002\000\020\017\162\020\011\022\005\036\014\037\010" +
    "\040\021\055\004\001\002\000\026\002\uffc7\017\uffc7\020" +
    "\uffc7\022\uffc7\023\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\055\uffc7\001\002\000\026\005\034\012\031\034\032\042" +
    "\033\043\036\044\037\052\041\053\043\054\035\055\030" +
    "\001\002\000\042\004\055\005\051\006\050\007\045\010" +
    "\057\011\061\013\165\024\046\025\052\026\056\027\060" +
    "\030\063\031\062\032\053\033\054\035\047\001\002\000" +
    "\004\016\166\001\002\000\016\020\011\022\005\036\014" +
    "\037\010\040\021\055\004\001\002\000\020\017\170\020" +
    "\011\022\005\036\014\037\010\040\021\055\004\001\002" +
    "\000\030\002\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\055\uffc2\001\002" +
    "\000\006\016\173\020\157\001\002\000\030\002\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\055\uffc4\001\002\000\016\020\011\022" +
    "\005\036\014\037\010\040\021\055\004\001\002\000\020" +
    "\017\175\020\011\022\005\036\014\037\010\040\021\055" +
    "\004\001\002\000\026\002\uffc6\017\uffc6\020\uffc6\022\uffc6" +
    "\023\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\055\uffc6\001" +
    "\002\000\004\002\001\001\002\000\026\005\034\012\031" +
    "\034\032\042\033\043\036\044\037\052\041\053\043\054" +
    "\035\055\030\001\002\000\042\004\055\005\051\006\050" +
    "\007\045\010\057\011\061\013\201\024\046\025\052\026" +
    "\056\027\060\030\063\031\062\032\053\033\054\035\047" +
    "\001\002\000\004\016\202\001\002\000\004\023\204\001" +
    "\002\000\010\017\211\023\210\041\212\001\002\000\026" +
    "\005\034\012\031\034\032\042\033\043\036\044\037\052" +
    "\041\053\043\054\035\055\030\001\002\000\042\004\055" +
    "\005\051\006\050\007\045\010\057\011\061\024\046\025" +
    "\052\026\056\027\060\030\063\031\062\032\053\033\054" +
    "\035\047\051\206\001\002\000\016\020\011\022\005\036" +
    "\014\037\010\040\021\055\004\001\002\000\024\017\uffbe" +
    "\020\011\022\005\023\uffbe\036\014\037\010\040\021\041" +
    "\uffbe\055\004\001\002\000\026\005\034\012\031\034\032" +
    "\042\033\043\036\044\037\052\041\053\043\054\035\055" +
    "\030\001\002\000\026\002\uffc0\017\uffc0\020\uffc0\022\uffc0" +
    "\023\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\055\uffc0\001" +
    "\002\000\004\051\213\001\002\000\016\020\011\022\005" +
    "\036\014\037\010\040\021\055\004\001\002\000\020\017" +
    "\215\020\011\022\005\036\014\037\010\040\021\055\004" +
    "\001\002\000\026\002\uffc1\017\uffc1\020\uffc1\022\uffc1\023" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\055\uffc1\001\002" +
    "\000\042\004\055\005\051\006\050\007\045\010\057\011" +
    "\061\024\046\025\052\026\056\027\060\030\063\031\062" +
    "\032\053\033\054\035\047\051\217\001\002\000\016\020" +
    "\011\022\005\036\014\037\010\040\021\055\004\001\002" +
    "\000\024\017\uffbf\020\011\022\005\023\uffbf\036\014\037" +
    "\010\040\021\041\uffbf\055\004\001\002\000\026\005\034" +
    "\012\031\034\032\042\033\043\036\044\037\052\041\053" +
    "\043\054\035\055\030\001\002\000\006\014\122\047\223" +
    "\001\002\000\026\005\034\012\031\034\032\042\033\043" +
    "\036\044\037\052\041\053\043\054\035\055\030\001\002" +
    "\000\066\002\uffd2\004\055\005\051\006\050\007\045\010" +
    "\057\011\061\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\046" +
    "\025\052\026\056\027\060\030\063\031\062\032\053\033" +
    "\054\035\047\036\uffd2\037\uffd2\040\uffd2\041\uffd2\046\uffd2" +
    "\055\uffd2\001\002\000\066\002\uffd3\004\055\005\051\006" +
    "\050\007\045\010\057\011\061\017\uffd3\020\uffd3\022\uffd3" +
    "\023\uffd3\024\046\025\052\026\056\027\060\030\063\031" +
    "\062\032\053\033\054\035\047\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\046\uffd3\055\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\024\002\005\004\012\005\006\006\017\011" +
    "\021\012\011\013\014\016\016\020\015\001\001\000\004" +
    "\007\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\012" +
    "\005\023\011\021\012\011\013\014\016\016\020\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\043\011\041\012\037\001\001\000\004\007\111" +
    "\001\001\000\010\003\106\011\041\012\037\001\001\000" +
    "\010\003\105\011\041\012\037\001\001\000\002\001\001" +
    "\000\010\003\104\011\041\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\103\011\041\012\037\001\001" +
    "\000\010\003\102\011\041\012\037\001\001\000\010\003" +
    "\077\011\041\012\037\001\001\000\010\003\076\011\041" +
    "\012\037\001\001\000\010\003\075\011\041\012\037\001" +
    "\001\000\010\003\074\011\041\012\037\001\001\000\010" +
    "\003\073\011\041\012\037\001\001\000\010\003\072\011" +
    "\041\012\037\001\001\000\010\003\071\011\041\012\037" +
    "\001\001\000\010\003\070\011\041\012\037\001\001\000" +
    "\010\003\067\011\041\012\037\001\001\000\010\003\066" +
    "\011\041\012\037\001\001\000\010\003\065\011\041\012" +
    "\037\001\001\000\010\003\064\011\041\012\037\001\001" +
    "\000\010\003\063\011\041\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\101\011\041\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\132" +
    "\011\041\012\037\001\001\000\002\001\001\000\012\003" +
    "\115\010\114\011\041\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\120\011" +
    "\041\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\123\011\041\012\037\001\001\000\010\003" +
    "\125\011\041\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\143\011\041\012\037\001\001\000\010" +
    "\003\140\011\041\012\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\136\011\041\012\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\146\011\041\012" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\012\005\006\006\151\011\021\012\011\013\014\016" +
    "\016\020\015\001\001\000\020\004\012\005\023\011\021" +
    "\012\011\013\014\016\016\020\015\001\001\000\006\014" +
    "\155\015\153\001\001\000\004\014\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\012\005\006\006\160\011\021\012\011\013\014\016\016" +
    "\020\015\001\001\000\020\004\012\005\023\011\021\012" +
    "\011\013\014\016\016\020\015\001\001\000\002\001\001" +
    "\000\010\003\163\011\041\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\012\005\006\006\166" +
    "\011\021\012\011\013\014\016\016\020\015\001\001\000" +
    "\020\004\012\005\023\011\021\012\011\013\014\016\016" +
    "\020\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\012\005\006\006\173\011\021" +
    "\012\011\013\014\016\016\020\015\001\001\000\020\004" +
    "\012\005\023\011\021\012\011\013\014\016\016\020\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\177\011\041\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\202\001\001\000\002\001\001\000" +
    "\010\003\204\011\041\012\037\001\001\000\002\001\001" +
    "\000\022\004\012\005\006\006\206\011\021\012\011\013" +
    "\014\016\016\020\015\001\001\000\020\004\012\005\023" +
    "\011\021\012\011\013\014\016\016\020\015\001\001\000" +
    "\010\003\215\011\041\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\012\005\006\006\213\011" +
    "\021\012\011\013\014\016\016\020\015\001\001\000\020" +
    "\004\012\005\023\011\021\012\011\013\014\016\016\020" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\012\005\006\006\217\011\021\012\011\013\014\016" +
    "\016\020\015\001\001\000\020\004\012\005\023\011\021" +
    "\012\011\013\014\016\016\020\015\001\001\000\010\003" +
    "\224\011\041\012\037\001\001\000\002\001\001\000\010" +
    "\003\223\011\041\012\037\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static AST root; //representa la raíz del árbol AST de la gramática
    public static int cont = 0;    //Contador para llevar control de los id´s de los nodos

    //Método para recuperación de errores
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico recuperado !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }

    //Método cuando ya no es posible la recuperación de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico, Panic mode !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        AST nd = new AST();
                        nd.setLabel("INICIO");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)r);

                        Parser.root = (AST) nd;
                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              Object RESULT =null;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        AST nd = new AST();
                                        nd.setLabel("LINST");
                                        nd.setIdNode(Parser.cont++);
                                        nd.addChildren((AST)linst);
                                        nd.addChildren((AST)inst);

                                        RESULT = nd;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("LINST");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)inst);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= ASIGN pyc 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = (AST)asig;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= ASIGN 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = (AST)asig;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= LLAMAD pyc 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = (AST)llamad;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= LLAMAD 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)llamad;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= IF 
            {
              Object RESULT =null;
		int i_fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i_fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i_f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)i_f;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= SWITCH 
            {
              Object RESULT =null;
		int switc_hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int switc_hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object switc_h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)switc_h;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= TRANS pyc 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = (AST)t;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= TRANS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)t;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= E plus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("+");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E minus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("-");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= E mul E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("*");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= E div E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("/");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E mod E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("%%");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E pot E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("^");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= minus E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("-");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= ipar E fpar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            AST nd = new AST();
                            nd.setLabel("( )");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)e);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E gt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E lt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E gte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E lte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E eq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("==");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E neq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E or E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("|");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E and E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("&");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= not E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Integer");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(num);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= flotante 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Numerico");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(fl);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("String");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(cad);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= verdadero 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("True");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("true");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= falso 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("False");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("false");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= nulo 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("Null");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("null");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= id 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    AST nd = new AST();
                    nd.setLabel("Ref");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue(val);

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= id LCOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Struct");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);
                                nd.addChildren((AST)lcor);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= LLAMAD 
            {
              Object RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)llam;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= MAT 
            {
              Object RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mat = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = (AST)mat;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E tern E dp E 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expTrueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expTrueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expTrue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expFalseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expFalseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expFalse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                AST nd = new AST();
                                                nd.setLabel("TERN");
                                                nd.setIdNode(Parser.cont++);
                                                nd.addChildren((AST)cond);
                                                nd.addChildren((AST)expTrue);
                                                nd.addChildren((AST)expFalse);
                                                
                                                RESULT = (AST)nd;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LCOR ::= LCOR icor E fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lcor);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LCOR ::= LCOR icor icor E fcor fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                    AST n = new AST();
                                                    n.setLabel("LCOR2");
                                                    n.setIdNode(Parser.cont++);
                                                    n.addChildren((AST)exp);

                                                    AST nd = new AST();
                                                    nd.setLabel("LCOR");
                                                    nd.setIdNode(Parser.cont++);
                                                    nd.addChildren((AST)lcor);
                                                    nd.addChildren((AST)n);

                                                    RESULT = nd;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LCOR ::= icor E fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                AST nd = new AST();
                                nd.setLabel("LCOR");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)exp);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LCOR ::= icor icor E fcor fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LPARAM ::= LPARAM colon E 
            {
              Object RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LPARAM");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lparam);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LPARAM ::= E 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("LPARAM");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)exp);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGN ::= id asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    AST ch1 = new AST();
                                    ch1.setLabel("ID");
                                    ch1.setIdNode(Parser.cont++);
                                    ch1.setValue(n);

                                    AST nd = new AST();
                                    nd.setLabel("ASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.addChildren(ch1);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGN ::= id LCOR asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST ch1 = new AST();
                                            ch1.setLabel("ID");
                                            ch1.setIdNode(Parser.cont++);
                                            ch1.setValue(n);

                                            AST nd = new AST();
                                            nd.setLabel("ASIGN");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(ch1);
                                            nd.addChildren((AST)index);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGN ::= MAT asign E 
            {
              Object RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object mat = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    AST nd = new AST();
                                    nd.setLabel("MATASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.addChildren((AST)mat);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LLAMAD ::= id ipar LPARAM fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("Llam");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)lparam);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LLAMAD ::= id ipar fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Llam");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);

                                RESULT = nd;   
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MAT ::= id icor E colon E fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT1");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MAT ::= id icor E colon fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MAT ::= id icor colon E fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT3");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TRANS ::= retrn 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("RETURN");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("return");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TRANS ::= brek 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("BREAK");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("break");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TRANS ::= cont 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("CONTINUE");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("continue");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= si ipar E fpar illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                        AST nd = new AST();
                                                        nd.setLabel("IF");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.addChildren((AST)cond);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= si ipar E fpar illa LINST flla sino illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                    AST nd = new AST();
                                                                                    nd.setLabel("IF");
                                                                                    nd.setIdNode(Parser.cont++);
                                                                                    nd.addChildren((AST)cond);
                                                                                    nd.addChildren((AST)linstt);
                                                                                    nd.addChildren((AST)linstf);

                                                                                    RESULT = nd;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= si ipar E fpar illa LINST flla LEI sino illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                            AST nd = new AST();
                                                                                            nd.setLabel("IF");
                                                                                            nd.setIdNode(Parser.cont++);
                                                                                            nd.addChildren((AST)cond);
                                                                                            nd.addChildren((AST)linstt);
                                                                                            nd.addChildren((AST)lei);
                                                                                            nd.addChildren((AST)linstf);

                                                                                            RESULT = nd;
                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= si ipar E fpar illa LINST flla LEI 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                AST nd = new AST();
                                                                nd.setLabel("IF");
                                                                nd.setIdNode(Parser.cont++);
                                                                nd.addChildren((AST)cond);
                                                                nd.addChildren((AST)linstt);
                                                                nd.addChildren((AST)lei);

                                                                RESULT = nd;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LEI ::= LEI EI 
            {
              Object RESULT =null;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("EI");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)lei);
                            nd.addChildren((AST)ei);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LEI ::= EI 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    AST nd = new AST();
                    nd.setLabel("EI");
                    nd.setIdNode(Parser.cont++);
                    nd.addChildren((AST)ei);

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EI ::= sino si ipar E fpar illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("IF");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)cond);
                                                            nd.addChildren((AST)linst);

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EI",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCH ::= swit ipar E fpar illa LCASE def dp LINST flla 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                AST nd = new AST();
                                                                                nd.setLabel("SWITCH");
                                                                                nd.setIdNode(Parser.cont++);
                                                                                nd.addChildren((AST)exp);
                                                                                nd.addChildren((AST)lcase);
                                                                                nd.addChildren((AST)linstf);

                                                                                RESULT = nd;
                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCH ::= swit ipar E fpar illa LCASE flla 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("SWITCH");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)exp);
                                                            nd.addChildren((AST)lcase);                                                                                                                 

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LCASE ::= LCASE caso E dp LINST 
            {
              Object RESULT =null;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        AST nd = new AST();
                                                        nd.setLabel("LCASE");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.addChildren((AST)lcase);
                                                        nd.addChildren((AST)exp);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LCASE ::= caso E dp LINST 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCASE");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)exp);
                                            nd.addChildren((AST)linst);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
