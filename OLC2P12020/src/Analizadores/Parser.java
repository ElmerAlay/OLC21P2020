
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import structs.AST;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\007" +
    "\000\002\007\006\000\002\007\010\000\002\007\005\000" +
    "\002\007\007\000\002\010\005\000\002\010\003\000\002" +
    "\004\005\000\002\004\006\000\002\004\005\000\002\011" +
    "\006\000\002\011\005\000\002\012\010\000\002\012\007" +
    "\000\002\012\007\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\013\011\000\002\013\015\000\002" +
    "\013\016\000\002\013\012\000\002\015\004\000\002\015" +
    "\003\000\002\014\012\000\002\016\014\000\002\016\011" +
    "\000\002\017\007\000\002\017\006\000\002\021\011\000" +
    "\002\022\012\000\002\023\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\026\003\022\020\026\022\010\024\021\025" +
    "\005\026\015\042\004\043\023\044\006\061\020\001\002" +
    "\000\040\002\uffc6\003\uffc6\017\uffc6\020\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\052\uffc6\061\uffc6\001\002\000\004\016\255\001" +
    "\002\000\040\002\uffc4\003\uffc4\017\uffc4\020\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\052\uffc4\061\uffc4\001\002\000\036\002\ufff7" +
    "\003\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\061\ufff7" +
    "\001\002\000\004\012\233\001\002\000\036\002\ufff8\003" +
    "\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\061\ufff8\001" +
    "\002\000\036\002\ufff9\003\ufff9\017\ufff9\020\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\061\ufff9\001\002\000\040\002\ufffc\003\ufffc" +
    "\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\052\232\061\ufffc" +
    "\001\002\000\030\002\000\003\022\020\026\022\010\024" +
    "\021\025\005\026\015\042\004\043\023\044\006\061\020" +
    "\001\002\000\004\012\222\001\002\000\040\002\ufff5\003" +
    "\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\052\221\061" +
    "\ufff5\001\002\000\036\002\ufffe\003\ufffe\017\ufffe\020\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\061\ufffe\001\002\000\010\012\120" +
    "\014\116\053\214\001\002\000\004\012\206\001\002\000" +
    "\004\052\205\001\002\000\040\002\uffc5\003\uffc5\017\uffc5" +
    "\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\052\uffc5\061\uffc5\001\002" +
    "\000\040\002\ufff2\003\ufff2\017\ufff2\020\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\052\204\061\ufff2\001\002\000\036\002\ufff6\003" +
    "\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\061\ufff6\001" +
    "\002\000\004\012\153\001\002\000\004\053\034\001\002" +
    "\000\004\002\033\001\002\000\040\002\ufffa\003\ufffa\017" +
    "\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\052\032\061\ufffa\001" +
    "\002\000\036\002\ufffb\003\ufffb\017\ufffb\020\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\061\ufffb\001\002\000\004\002\001\001\002" +
    "\000\026\005\041\012\036\040\037\046\040\047\043\050" +
    "\044\056\046\057\050\060\042\061\035\001\002\000\112" +
    "\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\120\013\uffd9\014\116\015\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\052" +
    "\uffd9\054\uffd9\055\uffd9\061\uffd9\001\002\000\026\005\041" +
    "\012\036\040\037\046\040\047\043\050\044\056\046\057" +
    "\050\060\042\061\035\001\002\000\026\005\041\012\036" +
    "\040\037\046\040\047\043\050\044\056\046\057\050\060" +
    "\042\061\035\001\002\000\106\002\uffda\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\015" +
    "\uffda\017\uffda\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\052\uffda\054\uffda\055\uffda\061\uffda\001\002\000" +
    "\026\005\041\012\036\040\037\046\040\047\043\050\044" +
    "\056\046\057\050\060\042\061\035\001\002\000\106\002" +
    "\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\052\uffdd\054\uffdd\055\uffdd" +
    "\061\uffdd\001\002\000\106\002\uffdc\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\015\uffdc" +
    "\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\052\uffdc\054\uffdc\055\uffdc\061\uffdc\001\002\000\106" +
    "\002\uffdb\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\061\uffdb\001\002\000\106\002\uffd6\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\052\uffd6\054\uffd6\055\uffd6\061\uffd6\001\002\000" +
    "\106\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\052\uffdf\054\uffdf" +
    "\055\uffdf\061\uffdf\001\002\000\106\002\uffd7\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\052\uffd7\054\uffd7\055\uffd7\061\uffd7\001\002" +
    "\000\106\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\013\uffde\015\uffde\017\uffde\020\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\052\uffde\054" +
    "\uffde\055\uffde\061\uffde\001\002\000\076\002\uffcc\003\uffcc" +
    "\004\062\005\056\006\055\007\052\010\064\011\065\017" +
    "\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\030\053\031\057\032\063\033\066\034\070\035\067\036" +
    "\060\037\061\041\054\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\052\uffcc\061\uffcc\001\002\000\026\005\041\012\036\040" +
    "\037\046\040\047\043\050\044\056\046\057\050\060\042" +
    "\061\035\001\002\000\026\005\041\012\036\040\037\046" +
    "\040\047\043\050\044\056\046\057\050\060\042\061\035" +
    "\001\002\000\026\005\041\012\036\040\037\046\040\047" +
    "\043\050\044\056\046\057\050\060\042\061\035\001\002" +
    "\000\026\005\041\012\036\040\037\046\040\047\043\050" +
    "\044\056\046\057\050\060\042\061\035\001\002\000\026" +
    "\005\041\012\036\040\037\046\040\047\043\050\044\056" +
    "\046\057\050\060\042\061\035\001\002\000\026\005\041" +
    "\012\036\040\037\046\040\047\043\050\044\056\046\057" +
    "\050\060\042\061\035\001\002\000\026\005\041\012\036" +
    "\040\037\046\040\047\043\050\044\056\046\057\050\060" +
    "\042\061\035\001\002\000\026\005\041\012\036\040\037" +
    "\046\040\047\043\050\044\056\046\057\050\060\042\061" +
    "\035\001\002\000\026\005\041\012\036\040\037\046\040" +
    "\047\043\050\044\056\046\057\050\060\042\061\035\001" +
    "\002\000\026\005\041\012\036\040\037\046\040\047\043" +
    "\050\044\056\046\057\050\060\042\061\035\001\002\000" +
    "\026\005\041\012\036\040\037\046\040\047\043\050\044" +
    "\056\046\057\050\060\042\061\035\001\002\000\026\005" +
    "\041\012\036\040\037\046\040\047\043\050\044\056\046" +
    "\057\050\060\042\061\035\001\002\000\026\005\041\012" +
    "\036\040\037\046\040\047\043\050\044\056\046\057\050" +
    "\060\042\061\035\001\002\000\026\005\041\012\036\040" +
    "\037\046\040\047\043\050\044\056\046\057\050\060\042" +
    "\061\035\001\002\000\026\005\041\012\036\040\037\046" +
    "\040\047\043\050\044\056\046\057\050\060\042\061\035" +
    "\001\002\000\106\002\uffe4\003\uffe4\004\062\005\056\006" +
    "\055\007\052\010\064\011\065\013\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\052" +
    "\uffe4\054\uffe4\055\uffe4\061\uffe4\001\002\000\106\002\uffe3" +
    "\003\uffe3\004\062\005\056\006\055\007\052\010\064\011" +
    "\065\013\uffe3\015\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\052\uffe3\054\uffe3\055\uffe3\061" +
    "\uffe3\001\002\000\106\002\uffe5\003\uffe5\004\062\005\056" +
    "\006\055\007\052\010\064\011\065\013\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\052\uffe5\054\uffe5\055\uffe5\061\uffe5\001\002\000\106\002" +
    "\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\064" +
    "\011\uffec\013\uffec\015\uffec\017\uffec\020\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\052\uffec\054\uffec\055\uffec" +
    "\061\uffec\001\002\000\106\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\052\uffeb\054\uffeb\055\uffeb\061\uffeb\001\002\000\106" +
    "\002\uffe6\003\uffe6\004\062\005\056\006\055\007\052\010" +
    "\064\011\065\013\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\052\uffe6\054\uffe6\055" +
    "\uffe6\061\uffe6\001\002\000\106\002\ufff0\003\ufff0\004\ufff0" +
    "\005\ufff0\006\055\007\052\010\064\011\065\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\052\ufff0\054\ufff0\055\ufff0\061\ufff0\001\002\000" +
    "\106\002\uffe1\003\uffe1\004\062\005\056\006\055\007\052" +
    "\010\064\011\065\013\uffe1\015\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\053\031\057" +
    "\032\063\033\066\034\070\035\067\036\uffe1\037\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\052\uffe1\054\uffe1" +
    "\055\uffe1\061\uffe1\001\002\000\106\002\uffe2\003\uffe2\004" +
    "\062\005\056\006\055\007\052\010\064\011\065\013\uffe2" +
    "\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\030\053\031\057\032\063\033\066\034\070" +
    "\035\067\036\uffe2\037\061\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\052\uffe2\054\uffe2\055\uffe2\061\uffe2\001\002" +
    "\000\106\002\uffe7\003\uffe7\004\062\005\056\006\055\007" +
    "\052\010\064\011\065\013\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\052\uffe7\054" +
    "\uffe7\055\uffe7\061\uffe7\001\002\000\106\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\006\055\007\052\010\064\011\065\013" +
    "\uffef\015\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\052\uffef\054\uffef\055\uffef\061\uffef\001" +
    "\002\000\106\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\064\011\uffee\013\uffee\015\uffee\017\uffee\020" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\052\uffee" +
    "\054\uffee\055\uffee\061\uffee\001\002\000\042\004\062\005" +
    "\056\006\055\007\052\010\064\011\065\030\053\031\057" +
    "\032\063\033\066\034\070\035\067\036\060\037\061\041" +
    "\054\055\106\001\002\000\026\005\041\012\036\040\037" +
    "\046\040\047\043\050\044\056\046\057\050\060\042\061" +
    "\035\001\002\000\106\002\uffd5\003\uffd5\004\062\005\056" +
    "\006\055\007\052\010\064\011\065\013\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\030\053\031\057\032\063\033\066\034\070\035\067\036" +
    "\060\037\061\041\054\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\052\uffd5\054\uffd5\055\uffd5\061\uffd5\001\002\000\106\002" +
    "\uffe8\003\uffe8\004\062\005\056\006\055\007\052\010\064" +
    "\011\065\013\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\052\uffe8\054\uffe8\055\uffe8" +
    "\061\uffe8\001\002\000\106\002\uffed\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\064\011\uffed\013\uffed\015\uffed" +
    "\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\052\uffed\054\uffed\055\uffed\061\uffed\001\002\000\106" +
    "\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\013\uffea\015\uffea\017\uffea\020\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\052\uffea\054\uffea\055" +
    "\uffea\061\uffea\001\002\000\106\002\uffe0\003\uffe0\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\013\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\053\031\057\032\063\033\066\034\070\035" +
    "\067\036\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\052\uffe0\054\uffe0\055\uffe0\061\uffe0\001\002\000" +
    "\042\004\062\005\056\006\055\007\052\010\064\011\065" +
    "\013\115\030\053\031\057\032\063\033\066\034\070\035" +
    "\067\036\060\037\061\041\054\001\002\000\106\002\uffe9" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\052\uffe9\054\uffe9\055\uffe9\061" +
    "\uffe9\001\002\000\032\005\041\012\036\014\137\040\037" +
    "\046\040\047\043\050\044\054\136\056\046\057\050\060" +
    "\042\061\035\001\002\000\110\002\uffd8\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\127\015\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\052\uffd8\054\uffd8\055\uffd8\061\uffd8\001" +
    "\002\000\030\005\041\012\036\013\121\040\037\046\040" +
    "\047\043\050\044\056\046\057\050\060\042\061\035\001" +
    "\002\000\106\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\013\uffca\015\uffca\017\uffca\020" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\052\uffca" +
    "\054\uffca\055\uffca\061\uffca\001\002\000\006\013\125\054" +
    "\124\001\002\000\044\004\062\005\056\006\055\007\052" +
    "\010\064\011\065\013\uffcf\030\053\031\057\032\063\033" +
    "\066\034\070\035\067\036\060\037\061\041\054\054\uffcf" +
    "\001\002\000\026\005\041\012\036\040\037\046\040\047" +
    "\043\050\044\056\046\057\050\060\042\061\035\001\002" +
    "\000\106\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\052\uffcb\054" +
    "\uffcb\055\uffcb\061\uffcb\001\002\000\044\004\062\005\056" +
    "\006\055\007\052\010\064\011\065\013\uffd0\030\053\031" +
    "\057\032\063\033\066\034\070\035\067\036\060\037\061" +
    "\041\054\054\uffd0\001\002\000\030\005\041\012\036\014" +
    "\130\040\037\046\040\047\043\050\044\056\046\057\050" +
    "\060\042\061\035\001\002\000\026\005\041\012\036\040" +
    "\037\046\040\047\043\050\044\056\046\057\050\060\042" +
    "\061\035\001\002\000\042\004\062\005\056\006\055\007" +
    "\052\010\064\011\065\015\132\030\053\031\057\032\063" +
    "\033\066\034\070\035\067\036\060\037\061\041\054\001" +
    "\002\000\112\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\061\uffd4\001\002\000" +
    "\042\004\062\005\056\006\055\007\052\010\064\011\065" +
    "\015\134\030\053\031\057\032\063\033\066\034\070\035" +
    "\067\036\060\037\061\041\054\001\002\000\004\015\135" +
    "\001\002\000\112\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\061\uffd3\001\002" +
    "\000\026\005\041\012\036\040\037\046\040\047\043\050" +
    "\044\056\046\057\050\060\042\061\035\001\002\000\026" +
    "\005\041\012\036\040\037\046\040\047\043\050\044\056" +
    "\046\057\050\060\042\061\035\001\002\000\044\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\015\141\030" +
    "\053\031\057\032\063\033\066\034\070\035\067\036\060" +
    "\037\061\041\054\054\142\001\002\000\112\002\uffd2\003" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\061\uffd2\001\002\000\030\005\041\012\036\015" +
    "\143\040\037\046\040\047\043\050\044\056\046\057\050" +
    "\060\042\061\035\001\002\000\110\002\uffc8\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\061\uffc8" +
    "\001\002\000\042\004\062\005\056\006\055\007\052\010" +
    "\064\011\065\015\145\030\053\031\057\032\063\033\066" +
    "\034\070\035\067\036\060\037\061\041\054\001\002\000" +
    "\110\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\061\uffc9\001\002\000\042\004\062\005" +
    "\056\006\055\007\052\010\064\011\065\015\147\030\053" +
    "\031\057\032\063\033\066\034\070\035\067\036\060\037" +
    "\061\041\054\001\002\000\004\015\150\001\002\000\112" +
    "\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\061\uffd1\001\002\000\042\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\015\152\030" +
    "\053\031\057\032\063\033\066\034\070\035\067\036\060" +
    "\037\061\041\054\001\002\000\110\002\uffc7\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\061\uffc7" +
    "\001\002\000\026\005\041\012\036\040\037\046\040\047" +
    "\043\050\044\056\046\057\050\060\042\061\035\001\002" +
    "\000\042\004\062\005\056\006\055\007\052\010\064\011" +
    "\065\013\155\030\053\031\057\032\063\033\066\034\070" +
    "\035\067\036\060\037\061\041\054\001\002\000\004\016" +
    "\156\001\002\000\026\003\022\020\026\022\010\024\021" +
    "\025\005\026\015\042\004\043\023\044\006\061\020\001" +
    "\002\000\030\003\022\017\161\020\026\022\010\024\021" +
    "\025\005\026\015\042\004\043\023\044\006\061\020\001" +
    "\002\000\036\002\uffff\003\uffff\017\uffff\020\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\061\uffff\001\002\000\040\002\uffc3\003\uffc3" +
    "\017\uffc3\020\uffc3\021\163\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\061\uffc3" +
    "\001\002\000\040\002\uffc0\003\uffc0\017\uffc0\020\uffc0\021" +
    "\177\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\061\uffc0\001\002\000\006\016" +
    "\166\020\165\001\002\000\040\002\uffbe\003\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\061\uffbe\001\002" +
    "\000\004\012\171\001\002\000\026\003\022\020\026\022" +
    "\010\024\021\025\005\026\015\042\004\043\023\044\006" +
    "\061\020\001\002\000\030\003\022\017\170\020\026\022" +
    "\010\024\021\025\005\026\015\042\004\043\023\044\006" +
    "\061\020\001\002\000\036\002\uffc2\003\uffc2\017\uffc2\020" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\061\uffc2\001\002\000\026\005" +
    "\041\012\036\040\037\046\040\047\043\050\044\056\046" +
    "\057\050\060\042\061\035\001\002\000\042\004\062\005" +
    "\056\006\055\007\052\010\064\011\065\013\173\030\053" +
    "\031\057\032\063\033\066\034\070\035\067\036\060\037" +
    "\061\041\054\001\002\000\004\016\174\001\002\000\026" +
    "\003\022\020\026\022\010\024\021\025\005\026\015\042" +
    "\004\043\023\044\006\061\020\001\002\000\030\003\022" +
    "\017\176\020\026\022\010\024\021\025\005\026\015\042" +
    "\004\043\023\044\006\061\020\001\002\000\040\002\uffbd" +
    "\003\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\061\uffbd\001\002\000\006\016\201\020\165\001\002\000" +
    "\040\002\uffbf\003\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\061\uffbf\001\002\000\026\003\022\020\026" +
    "\022\010\024\021\025\005\026\015\042\004\043\023\044" +
    "\006\061\020\001\002\000\030\003\022\017\203\020\026" +
    "\022\010\024\021\025\005\026\015\042\004\043\023\044" +
    "\006\061\020\001\002\000\036\002\uffc1\003\uffc1\017\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\061\uffc1\001\002\000\036" +
    "\002\ufff3\003\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\061\ufff3\001\002\000\036\002\ufff1\003\ufff1\017\ufff1\020" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\061\ufff1\001\002\000\026\005" +
    "\041\012\036\040\037\046\040\047\043\050\044\056\046" +
    "\057\050\060\042\061\035\001\002\000\042\004\062\005" +
    "\056\006\055\007\052\010\064\011\065\013\210\030\053" +
    "\031\057\032\063\033\066\034\070\035\067\036\060\037" +
    "\061\041\054\001\002\000\004\016\211\001\002\000\026" +
    "\003\022\020\026\022\010\024\021\025\005\026\015\042" +
    "\004\043\023\044\006\061\020\001\002\000\030\003\022" +
    "\017\213\020\026\022\010\024\021\025\005\026\015\042" +
    "\004\043\023\044\006\061\020\001\002\000\036\002\uffb8" +
    "\003\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\061\uffb8" +
    "\001\002\000\026\005\041\012\036\040\037\046\040\047" +
    "\043\050\044\056\046\057\050\060\042\061\035\001\002" +
    "\000\006\014\127\053\216\001\002\000\026\005\041\012" +
    "\036\040\037\046\040\047\043\050\044\056\046\057\050" +
    "\060\042\061\035\001\002\000\076\002\uffcd\003\uffcd\004" +
    "\062\005\056\006\055\007\052\010\064\011\065\017\uffcd" +
    "\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030" +
    "\053\031\057\032\063\033\066\034\070\035\067\036\060" +
    "\037\061\041\054\042\uffcd\043\uffcd\044\uffcd\045\uffcd\052" +
    "\uffcd\061\uffcd\001\002\000\076\002\uffce\003\uffce\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\017\uffce\020" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\053" +
    "\031\057\032\063\033\066\034\070\035\067\036\060\037" +
    "\061\041\054\042\uffce\043\uffce\044\uffce\045\uffce\052\uffce" +
    "\061\uffce\001\002\000\036\002\ufff4\003\ufff4\017\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\061\ufff4\001\002\000\004\061" +
    "\223\001\002\000\004\027\224\001\002\000\026\005\041" +
    "\012\036\040\037\046\040\047\043\050\044\056\046\057" +
    "\050\060\042\061\035\001\002\000\042\004\062\005\056" +
    "\006\055\007\052\010\064\011\065\013\226\030\053\031" +
    "\057\032\063\033\066\034\070\035\067\036\060\037\061" +
    "\041\054\001\002\000\004\016\227\001\002\000\026\003" +
    "\022\020\026\022\010\024\021\025\005\026\015\042\004" +
    "\043\023\044\006\061\020\001\002\000\030\003\022\017" +
    "\231\020\026\022\010\024\021\025\005\026\015\042\004" +
    "\043\023\044\006\061\020\001\002\000\036\002\uffb6\003" +
    "\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\061\uffb6\001" +
    "\002\000\036\002\ufffd\003\ufffd\017\ufffd\020\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\061\ufffd\001\002\000\026\005\041\012\036" +
    "\040\037\046\040\047\043\050\044\056\046\057\050\060" +
    "\042\061\035\001\002\000\042\004\062\005\056\006\055" +
    "\007\052\010\064\011\065\013\235\030\053\031\057\032" +
    "\063\033\066\034\070\035\067\036\060\037\061\041\054" +
    "\001\002\000\004\016\236\001\002\000\004\023\240\001" +
    "\002\000\010\017\245\023\244\045\246\001\002\000\026" +
    "\005\041\012\036\040\037\046\040\047\043\050\044\056" +
    "\046\057\050\060\042\061\035\001\002\000\042\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\030\053\031" +
    "\057\032\063\033\066\034\070\035\067\036\060\037\061" +
    "\041\054\055\242\001\002\000\026\003\022\020\026\022" +
    "\010\024\021\025\005\026\015\042\004\043\023\044\006" +
    "\061\020\001\002\000\034\003\022\017\uffb9\020\026\022" +
    "\010\023\uffb9\024\021\025\005\026\015\042\004\043\023" +
    "\044\006\045\uffb9\061\020\001\002\000\026\005\041\012" +
    "\036\040\037\046\040\047\043\050\044\056\046\057\050" +
    "\060\042\061\035\001\002\000\036\002\uffbb\003\uffbb\017" +
    "\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\061\uffbb\001\002\000" +
    "\004\055\247\001\002\000\026\003\022\020\026\022\010" +
    "\024\021\025\005\026\015\042\004\043\023\044\006\061" +
    "\020\001\002\000\030\003\022\017\251\020\026\022\010" +
    "\024\021\025\005\026\015\042\004\043\023\044\006\061" +
    "\020\001\002\000\036\002\uffbc\003\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\061\uffbc\001\002\000\042\004\062" +
    "\005\056\006\055\007\052\010\064\011\065\030\053\031" +
    "\057\032\063\033\066\034\070\035\067\036\060\037\061" +
    "\041\054\055\253\001\002\000\026\003\022\020\026\022" +
    "\010\024\021\025\005\026\015\042\004\043\023\044\006" +
    "\061\020\001\002\000\034\003\022\017\uffba\020\026\022" +
    "\010\023\uffba\024\021\025\005\026\015\042\004\043\023" +
    "\044\006\045\uffba\061\020\001\002\000\026\003\022\020" +
    "\026\022\010\024\021\025\005\026\015\042\004\043\023" +
    "\044\006\061\020\001\002\000\030\003\022\017\257\020" +
    "\026\022\010\024\021\025\005\026\015\042\004\043\023" +
    "\044\006\061\020\001\002\000\004\024\260\001\002\000" +
    "\004\012\261\001\002\000\026\005\041\012\036\040\037" +
    "\046\040\047\043\050\044\056\046\057\050\060\042\061" +
    "\035\001\002\000\042\004\062\005\056\006\055\007\052" +
    "\010\064\011\065\013\263\030\053\031\057\032\063\033" +
    "\066\034\070\035\067\036\060\037\061\041\054\001\002" +
    "\000\040\002\uffb7\003\uffb7\017\uffb7\020\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\052\uffb7\061\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\032\002\027\004\012\005\016\006\013\011" +
    "\030\012\026\013\011\016\010\020\023\021\006\022\015" +
    "\023\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\012\005\157\011\030\012\026\013\011\016\010\020\023" +
    "\021\006\022\015\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\050\011\046\012\044" +
    "\001\001\000\004\007\116\001\001\000\010\003\113\011" +
    "\046\012\044\001\001\000\010\003\112\011\046\012\044" +
    "\001\001\000\002\001\001\000\010\003\111\011\046\012" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\110" +
    "\011\046\012\044\001\001\000\010\003\107\011\046\012" +
    "\044\001\001\000\010\003\104\011\046\012\044\001\001" +
    "\000\010\003\103\011\046\012\044\001\001\000\010\003" +
    "\102\011\046\012\044\001\001\000\010\003\101\011\046" +
    "\012\044\001\001\000\010\003\100\011\046\012\044\001" +
    "\001\000\010\003\077\011\046\012\044\001\001\000\010" +
    "\003\076\011\046\012\044\001\001\000\010\003\075\011" +
    "\046\012\044\001\001\000\010\003\074\011\046\012\044" +
    "\001\001\000\010\003\073\011\046\012\044\001\001\000" +
    "\010\003\072\011\046\012\044\001\001\000\010\003\071" +
    "\011\046\012\044\001\001\000\010\003\070\011\046\012" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\106\011\046\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\137\011\046\012\044\001\001\000" +
    "\002\001\001\000\012\003\122\010\121\011\046\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\125\011\046\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\130\011\046\012" +
    "\044\001\001\000\010\003\132\011\046\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\150\011\046" +
    "\012\044\001\001\000\010\003\145\011\046\012\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\143" +
    "\011\046\012\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\153\011\046\012\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\012\005\016\006\156\011" +
    "\030\012\026\013\011\016\010\020\023\021\006\022\015" +
    "\023\024\001\001\000\026\004\012\005\157\011\030\012" +
    "\026\013\011\016\010\020\023\021\006\022\015\023\024" +
    "\001\001\000\002\001\001\000\006\014\163\015\161\001" +
    "\001\000\004\014\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\012\005\016\006" +
    "\166\011\030\012\026\013\011\016\010\020\023\021\006" +
    "\022\015\023\024\001\001\000\026\004\012\005\157\011" +
    "\030\012\026\013\011\016\010\020\023\021\006\022\015" +
    "\023\024\001\001\000\002\001\001\000\010\003\171\011" +
    "\046\012\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\012\005\016\006\174\011\030\012\026\013" +
    "\011\016\010\020\023\021\006\022\015\023\024\001\001" +
    "\000\026\004\012\005\157\011\030\012\026\013\011\016" +
    "\010\020\023\021\006\022\015\023\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\012\005\016\006\201\011\030\012\026\013\011\016\010" +
    "\020\023\021\006\022\015\023\024\001\001\000\026\004" +
    "\012\005\157\011\030\012\026\013\011\016\010\020\023" +
    "\021\006\022\015\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\206\011\046" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\012\005\016\006\211\011\030\012\026\013\011" +
    "\016\010\020\023\021\006\022\015\023\024\001\001\000" +
    "\026\004\012\005\157\011\030\012\026\013\011\016\010" +
    "\020\023\021\006\022\015\023\024\001\001\000\002\001" +
    "\001\000\010\003\217\011\046\012\044\001\001\000\002" +
    "\001\001\000\010\003\216\011\046\012\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\224\011\046\012" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\012\005\016\006\227\011\030\012\026\013\011\016" +
    "\010\020\023\021\006\022\015\023\024\001\001\000\026" +
    "\004\012\005\157\011\030\012\026\013\011\016\010\020" +
    "\023\021\006\022\015\023\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\233\011\046\012\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\236" +
    "\001\001\000\002\001\001\000\010\003\240\011\046\012" +
    "\044\001\001\000\002\001\001\000\030\004\012\005\016" +
    "\006\242\011\030\012\026\013\011\016\010\020\023\021" +
    "\006\022\015\023\024\001\001\000\026\004\012\005\157" +
    "\011\030\012\026\013\011\016\010\020\023\021\006\022" +
    "\015\023\024\001\001\000\010\003\251\011\046\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\012\005\016\006\247\011\030\012\026\013\011\016\010" +
    "\020\023\021\006\022\015\023\024\001\001\000\026\004" +
    "\012\005\157\011\030\012\026\013\011\016\010\020\023" +
    "\021\006\022\015\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\012\005\016\006\253\011\030" +
    "\012\026\013\011\016\010\020\023\021\006\022\015\023" +
    "\024\001\001\000\026\004\012\005\157\011\030\012\026" +
    "\013\011\016\010\020\023\021\006\022\015\023\024\001" +
    "\001\000\030\004\012\005\016\006\255\011\030\012\026" +
    "\013\011\016\010\020\023\021\006\022\015\023\024\001" +
    "\001\000\026\004\012\005\157\011\030\012\026\013\011" +
    "\016\010\020\023\021\006\022\015\023\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\261\011\046" +
    "\012\044\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static AST root; //representa la raíz del árbol AST de la gramática
    public static int cont = 0;    //Contador para llevar control de los id´s de los nodos

    //Método para recuperación de errores
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico recuperado !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }

    //Método cuando ya no es posible la recuperación de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico, Panic mode !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LINST 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        AST nd = new AST();
                        nd.setLabel("INICIO");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)r);

                        Parser.root = (AST) nd;
                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              Object RESULT =null;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        AST nd = new AST();
                                        nd.setLabel("LINST");
                                        nd.setIdNode(Parser.cont++);
                                        nd.addChildren((AST)linst);
                                        nd.addChildren((AST)inst);

                                        RESULT = nd;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("LINST");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)inst);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= ASIGN pyc 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = (AST)asig;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= ASIGN 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = (AST)asig;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= LLAMAD pyc 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = (AST)llamad;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= LLAMAD 
            {
              Object RESULT =null;
		int llamadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llamad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)llamad;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= IF 
            {
              Object RESULT =null;
		int i_fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i_fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i_f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)i_f;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= SWITCH 
            {
              Object RESULT =null;
		int switc_hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int switc_hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object switc_h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)switc_h;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= WHILE 
            {
              Object RESULT =null;
		int whil_eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whil_eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object whil_e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)whil_e;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= FOR 
            {
              Object RESULT =null;
		int fo_rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fo_rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fo_r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = (AST)fo_r;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= DO 
            {
              Object RESULT =null;
		int doWhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doWhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object doWhile = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = (AST)doWhile;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= DO pyc 
            {
              Object RESULT =null;
		int doWhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int doWhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object doWhile = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = (AST)doWhile;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= TRANS pyc 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = (AST)t;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= TRANS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)t;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= error pyc 
            {
              Object RESULT =null;
		
                                AST nd = new AST();
                                nd.setLabel("error");
                                nd.setIdNode(Parser.cont++);
                                nd.setValue("error");

                                RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E plus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("+");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E minus E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST nd = new AST();
                                nd.setLabel("-");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E mul E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("*");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E div E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("/");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E mod E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("%%");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E pot E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("^");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= minus E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("-");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= ipar E fpar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            AST nd = new AST();
                            nd.setLabel("( )");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)e);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E gt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E lt E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E gte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel(">=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E lte E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("<=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E eq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("==");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E neq E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!=");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E or E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("|");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E and E 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("&");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= not E 
            {
              Object RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("!");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Integer");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(num);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= flotante 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("Numerico");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(fl);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("String");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue(cad);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= verdadero 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("True");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("true");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= falso 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("False");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("false");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= nulo 
            {
              Object RESULT =null;
		
                    AST nd = new AST();
                    nd.setLabel("Null");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue("null");

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= id 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    AST nd = new AST();
                    nd.setLabel("Ref");
                    nd.setIdNode(Parser.cont++);
                    nd.setValue(val);

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= id LCOR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Struct");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);
                                nd.addChildren((AST)lcor);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= LLAMAD 
            {
              Object RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object llam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = (AST)llam;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= MAT 
            {
              Object RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mat = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = (AST)mat;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E tern E dp E 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expTrueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expTrueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expTrue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expFalseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expFalseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expFalse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                AST nd = new AST();
                                                nd.setLabel("TERN");
                                                nd.setIdNode(Parser.cont++);
                                                nd.addChildren((AST)cond);
                                                nd.addChildren((AST)expTrue);
                                                nd.addChildren((AST)expFalse);
                                                
                                                RESULT = (AST)nd;
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCOR ::= LCOR icor E fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lcor);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LCOR ::= LCOR icor icor E fcor fcor 
            {
              Object RESULT =null;
		int lcorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lcorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object lcor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                    AST n = new AST();
                                                    n.setLabel("LCOR2");
                                                    n.setIdNode(Parser.cont++);
                                                    n.addChildren((AST)exp);

                                                    AST nd = new AST();
                                                    nd.setLabel("LCOR");
                                                    nd.setIdNode(Parser.cont++);
                                                    nd.addChildren((AST)lcor);
                                                    nd.addChildren((AST)n);

                                                    RESULT = nd;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCOR ::= icor E fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                AST nd = new AST();
                                nd.setLabel("LCOR");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren((AST)exp);

                                RESULT = nd;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCOR ::= icor icor E fcor fcor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCOR2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LPARAM ::= LPARAM colon E 
            {
              Object RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LPARAM");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)lparam);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LPARAM ::= E 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        AST nd = new AST();
                        nd.setLabel("LPARAM");
                        nd.setIdNode(Parser.cont++);
                        nd.addChildren((AST)exp);

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARAM",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGN ::= id asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    AST ch1 = new AST();
                                    ch1.setLabel("ID");
                                    ch1.setIdNode(Parser.cont++);
                                    ch1.setValue(n);

                                    AST nd = new AST();
                                    nd.setLabel("ASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.addChildren(ch1);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGN ::= id LCOR asign E 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST ch1 = new AST();
                                            ch1.setLabel("ID");
                                            ch1.setIdNode(Parser.cont++);
                                            ch1.setValue(n);

                                            AST nd = new AST();
                                            nd.setLabel("ASIGN");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(ch1);
                                            nd.addChildren((AST)index);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGN ::= MAT asign E 
            {
              Object RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object mat = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    AST nd = new AST();
                                    nd.setLabel("MATASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.addChildren((AST)mat);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMAD ::= id ipar LPARAM fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lparam = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("Llam");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)lparam);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAMAD ::= id ipar fpar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Llam");
                                nd.setIdNode(Parser.cont++);
                                nd.addChildren(n);

                                RESULT = nd;   
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMAD",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MAT ::= id icor E colon E fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT1");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MAT ::= id icor E colon fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MAT ::= id icor colon E fcor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT3");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TRANS ::= retrn 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("RETURN");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("return");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TRANS ::= brek 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("BREAK");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("break");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TRANS ::= cont 
            {
              Object RESULT =null;
		
                        AST nd = new AST();
                        nd.setLabel("CONTINUE");
                        nd.setIdNode(Parser.cont++);
                        nd.setValue("continue");

                        RESULT = nd;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= si ipar E fpar illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                        AST nd = new AST();
                                                        nd.setLabel("IF");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.addChildren((AST)cond);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF ::= si ipar E fpar illa LINST flla sino illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                    AST nd = new AST();
                                                                                    nd.setLabel("IF");
                                                                                    nd.setIdNode(Parser.cont++);
                                                                                    nd.addChildren((AST)cond);
                                                                                    nd.addChildren((AST)linstt);
                                                                                    nd.addChildren((AST)linstf);

                                                                                    RESULT = nd;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= si ipar E fpar illa LINST flla LEI sino illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                            AST nd = new AST();
                                                                                            nd.setLabel("IF");
                                                                                            nd.setIdNode(Parser.cont++);
                                                                                            nd.addChildren((AST)cond);
                                                                                            nd.addChildren((AST)linstt);
                                                                                            nd.addChildren((AST)lei);
                                                                                            nd.addChildren((AST)linstf);

                                                                                            RESULT = nd;
                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF ::= si ipar E fpar illa LINST flla LEI 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int linsttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int linsttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object linstt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                AST nd = new AST();
                                                                nd.setLabel("IF");
                                                                nd.setIdNode(Parser.cont++);
                                                                nd.addChildren((AST)cond);
                                                                nd.addChildren((AST)linstt);
                                                                nd.addChildren((AST)lei);

                                                                RESULT = nd;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LEI ::= LEI EI 
            {
              Object RESULT =null;
		int leileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            AST nd = new AST();
                            nd.setLabel("EI");
                            nd.setIdNode(Parser.cont++);
                            nd.addChildren((AST)lei);
                            nd.addChildren((AST)ei);

                            RESULT = nd;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LEI ::= EI 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    AST nd = new AST();
                    nd.setLabel("EI");
                    nd.setIdNode(Parser.cont++);
                    nd.addChildren((AST)ei);

                    RESULT = nd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EI ::= sino si ipar E fpar illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("IF");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)cond);
                                                            nd.addChildren((AST)linst);

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EI",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH ::= swit ipar E fpar illa LCASE def dp LINST flla 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linstf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                AST nd = new AST();
                                                                                nd.setLabel("SWITCH");
                                                                                nd.setIdNode(Parser.cont++);
                                                                                nd.addChildren((AST)exp);
                                                                                nd.addChildren((AST)lcase);
                                                                                nd.addChildren((AST)linstf);

                                                                                RESULT = nd;
                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SWITCH ::= swit ipar E fpar illa LCASE flla 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("SWITCH");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)exp);
                                                            nd.addChildren((AST)lcase);                                                                                                                 

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LCASE ::= LCASE caso E dp LINST 
            {
              Object RESULT =null;
		int lcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lcase = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        AST nd = new AST();
                                                        nd.setLabel("LCASE");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.addChildren((AST)lcase);
                                                        nd.addChildren((AST)exp);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LCASE ::= caso E dp LINST 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            AST nd = new AST();
                                            nd.setLabel("LCASE");
                                            nd.setIdNode(Parser.cont++);
                                            nd.addChildren((AST)exp);
                                            nd.addChildren((AST)linst);

                                            RESULT = nd;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LCASE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE ::= whil ipar E fpar illa LINST flla 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("WHILE");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)cond);
                                                            nd.addChildren((AST)linst);

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DO ::= do_ illa LINST flla whil ipar E fpar 
            {
              Object RESULT =null;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            AST nd = new AST();
                                                            nd.setLabel("DO");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.addChildren((AST)linst);
                                                            nd.addChildren((AST)cond);

                                                            RESULT = nd;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= for_ ipar id in_ E fpar illa LINST flla 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object linst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                    AST ch1 = new AST();
                                                                    ch1.setLabel("ID");
                                                                    ch1.setIdNode(Parser.cont++);
                                                                    ch1.setValue(var);

                                                                    AST nd = new AST();
                                                                    nd.setLabel("FOR");
                                                                    nd.setIdNode(Parser.cont++);
                                                                    nd.addChildren(ch1);
                                                                    nd.addChildren((AST)exp);
                                                                    nd.addChildren((AST)linst);

                                                                    RESULT = nd;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
