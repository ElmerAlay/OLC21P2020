package analizadores;

import structs.AST;
import java_cup.runtime.*;
import abstracto.TError;
import java.util.LinkedList;

parser code
{:
    public static AST root; //representa la raíz del árbol AST de la gramática
    public static int cont = 0;    //Contador para llevar control de los id´s de los nodos
    public LinkedList<TError> TablaES = new LinkedList<TError>(); //Para manejar los errores sintácticos

    //Método para recuperación de errores
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico recuperado !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);

        TError error = new TError(lexema,"Sintáctico","No se esperaba ese caracter",fila,columna);
        TablaES.add(error);
    }

    //Método cuando ya no es posible la recuperación de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!! Error sintáctico, Panic mode !!!!!");
        System.out.println("Lexema: " + lexema + " fila: " + fila + " columna: " + columna);
    }
:}

action code
{:
:}


terminal plus, minus, mul, div, pot, mod;
terminal ipar, fpar, icor, fcor, illa, flla;
terminal si, sino, swit, caso, whil, do_, for_, in_;
terminal gt, lt, gte, lte, eq, neq;
terminal or, and, not;
terminal tern;
terminal arrow, func;
terminal retrn, brek, cont, def;
terminal nulo, verdadero, falso, uminus;
terminal pyc, asign, colon, dp;
terminal String numero, flotante, cadena, id;

non terminal INICIO, E, ASIGN, INST, LINST, LCOR, LPARAM, LLAMAD, MAT, IF, EI, LEI, SWITCH, LCASE, TRANS, WHILE, DO, FOR, FUNC, LPARAM2;

precedence left tern;
precedence left  or;
precedence left  and;
precedence right not;
precedence left lt, gt, lte, gte, eq, neq;

precedence left plus, minus;
precedence left mul, div, mod;
precedence left pot;
precedence right uminus;

start with INICIO;

INICIO ::= LINST:r  {: 
                        AST nd = new AST();
                        nd.setLabel("INICIO");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( rright);
                        nd.setColumn(rleft);
                        nd.addChildren((AST)r);

                        Parser.root = (AST) nd;
                        RESULT = nd;
                    :}
;

LINST   ::= LINST:linst INST:inst   {:
                                        AST nd = new AST();
                                        nd.setLabel("LINST");
                                        nd.setIdNode(Parser.cont++);
                                        nd.setRow( instright);
                                        nd.setColumn(instleft);
                                        nd.addChildren((AST)linst);
                                        if(!((AST)inst).getLabel().equals("error"))
                                            nd.addChildren((AST)inst);

                                        RESULT = nd;
                                    :}
        |   INST:inst   {:
                            AST nd = new AST();
                            nd.setLabel("LINST");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( instright);
                            nd.setColumn(instleft);
                            if(!((AST)inst).getLabel().equals("error"))
                                nd.addChildren((AST)inst);

                            RESULT = nd;
                        :}
;

INST    ::= ASIGN:asig  pyc {:
                                RESULT = (AST)asig;
                            :}
        |   ASIGN:asig  {:
                            RESULT = (AST)asig;
                        :}
        |   LLAMAD:llamad pyc   {:
                                    RESULT = (AST)llamad;
                                :}
        |   LLAMAD:llamad   {:
                                RESULT = (AST)llamad;
                            :}
        |   IF:i_f  {:
                        RESULT = (AST)i_f;
                    :}
        |   SWITCH:switc_h  {:
                                RESULT = (AST)switc_h;
                            :}
        |   WHILE:whil_e    {:
                                RESULT = (AST)whil_e;
                            :}
        |   FOR:fo_r    {:
                                RESULT = (AST)fo_r;
                            :}
        |   DO:doWhile  {:
                            RESULT = (AST)doWhile;
                        :}
        |   DO:doWhile pyc  {:
                                RESULT = (AST)doWhile;
                            :}
        |   TRANS:t pyc {:
                            RESULT = (AST)t;
                        :}
        |   TRANS:t {:
                        RESULT = (AST)t;
                    :}
        |   error pyc   {:
                                AST nd = new AST();
                                nd.setLabel("error");
                                nd.setIdNode(Parser.cont++);

                                RESULT = nd;
                        :}
        |   FUNC:function   {:
                                RESULT = (AST)function;
                            :}
;

E ::=   E:op1 plus E:op2    {:
                                AST nd = new AST();
                                nd.setLabel("+");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( op1right);
                                nd.setColumn(op1left);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            :}
    |   E:op1 minus E:op2   {:
                                AST nd = new AST();
                                nd.setLabel("-");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( op1right);
                                nd.setColumn(op1left);
                                nd.addChildren((AST)op1);
                                nd.addChildren((AST)op2);

                                RESULT = nd;
                            :}
    |   E:op1 mul E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("*");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 div E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("/");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 mod E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("%%");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 pot E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("^");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   minus E:opu     {:
                            AST nd = new AST();
                            nd.setLabel("-");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( opuright);
                            nd.setColumn(opuleft);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        :}%prec uminus
    |   ipar E:e fpar   {:
                            AST nd = new AST();
                            nd.setLabel("( )");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( eright);
                            nd.setColumn(eleft);
                            nd.addChildren((AST)e);

                            RESULT = nd;
                        :}
    |   E:op1 gt E:op2  {:
                            AST nd = new AST();
                            nd.setLabel(">");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 lt E:op2  {:
                            AST nd = new AST();
                            nd.setLabel("<");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 gte E:op2 {:
                            AST nd = new AST();
                            nd.setLabel(">=");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 lte E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("<=");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 eq E:op2  {:
                            AST nd = new AST();
                            nd.setLabel("==");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 neq E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("!=");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 or E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("|");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   E:op1 and E:op2 {:
                            AST nd = new AST();
                            nd.setLabel("&");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( op1right);
                            nd.setColumn(op1left);
                            nd.addChildren((AST)op1);
                            nd.addChildren((AST)op2);

                            RESULT = nd;
                        :}
    |   not E:opu       {:
                            AST nd = new AST();
                            nd.setLabel("!");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( opuright);
                            nd.setColumn(opuleft);
                            nd.addChildren((AST)opu);

                            RESULT = nd;
                        :}
    |   numero:num  {:
                        AST nd = new AST();
                        nd.setLabel("Integer");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( numright);
                        nd.setColumn(numleft);
                        nd.setValue(num);

                        RESULT = nd;
                    :}
    |   flotante:fl {:
                        AST nd = new AST();
                        nd.setLabel("Numerico");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( flright);
                        nd.setColumn(flleft);
                        nd.setValue(fl);

                        RESULT = nd;
                    :}
    |   cadena:cad  {:
                        AST nd = new AST();
                        nd.setLabel("String");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( cadright);
                        nd.setColumn(cadleft);
                        nd.setValue(cad);

                        RESULT = nd;
                    :}
    |   verdadero:v {:
                        AST nd = new AST();
                        nd.setLabel("True");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( vright);
                        nd.setColumn(vleft);
                        nd.setValue("true");

                        RESULT = nd;
                    :}
    |   falso:f {:
                    AST nd = new AST();
                    nd.setLabel("False");
                    nd.setIdNode(Parser.cont++);
                    nd.setRow( fright);
                    nd.setColumn(fleft);
                    nd.setValue("false");

                    RESULT = nd;
                :}
    |   nulo:n  {:
                    AST nd = new AST();
                    nd.setLabel("Null");
                    nd.setIdNode(Parser.cont++);
                    nd.setRow( nright);
                    nd.setColumn(nleft);
                    nd.setValue("null");

                    RESULT = nd;
                :}
    |   def:d   {:
                    AST nd = new AST();
                    nd.setLabel("DEF");
                    nd.setRow( dright);
                    nd.setColumn(dleft);
                    nd.setIdNode(Parser.cont++);

                    RESULT = nd;
                :}
    |   id:val  {:
                    AST nd = new AST();
                    nd.setLabel("Ref");
                    nd.setIdNode(Parser.cont++);
                    nd.setRow( valright);
                    nd.setColumn(valleft);
                    nd.setValue(val);

                    RESULT = nd;
                :}
    |   id:val LCOR:lcor    {:
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setRow( valright);
                                n.setColumn(valleft);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Struct");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( valright);
                                nd.setColumn(valleft);
                                nd.addChildren(n);
                                nd.addChildren((AST)lcor);

                                RESULT = nd;
                            :}
    |   LLAMAD:llam {:
                        RESULT = (AST)llam;
                    :}
    |   MAT:mat {:
                    RESULT = (AST)mat;
                :}
    |   E:cond tern E:expTrue dp E:expFalse {:
                                                AST nd = new AST();
                                                nd.setLabel("TERN");
                                                nd.setIdNode(Parser.cont++);
                                                nd.setRow( condright);
                                                nd.setColumn(condleft);
                                                nd.addChildren((AST)cond);
                                                nd.addChildren((AST)expTrue);
                                                nd.addChildren((AST)expFalse);
                                                
                                                RESULT = (AST)nd;
                                            :}
;

LCOR    ::= LCOR:lcor icor E:exp fcor   {:
                                            AST nd = new AST();
                                            nd.setLabel("LCOR");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( expright);
                                            nd.setColumn(expleft);
                                            nd.addChildren((AST)lcor);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        :}
        |   LCOR:lcor icor icor E:exp fcor fcor {:
                                                    AST n = new AST();
                                                    n.setLabel("LCOR2");
                                                    n.setIdNode(Parser.cont++);
                                                    n.setRow( expright);
                                                    n.setColumn(expleft);
                                                    n.addChildren((AST)exp);

                                                    AST nd = new AST();
                                                    nd.setLabel("LCOR");
                                                    nd.setIdNode(Parser.cont++);
                                                    nd.setRow( lcorright);
                                                    nd.setColumn(lcorleft);
                                                    nd.addChildren((AST)lcor);
                                                    nd.addChildren(n);

                                                    RESULT = nd;
                                                :}
        |   icor E:exp fcor {:
                                AST nd = new AST();
                                nd.setLabel("LCOR");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( expright);
                                nd.setColumn(expleft);
                                nd.addChildren((AST)exp);

                                RESULT = nd;
                            :}
        |   icor icor E:exp fcor fcor   {:
                                            AST nd = new AST();
                                            nd.setLabel("LCOR2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( expright);
                                            nd.setColumn(expleft);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        :}
;

LPARAM  ::= LPARAM:lparam colon E:exp   {:
                                            AST nd = new AST();
                                            nd.setLabel("LPARAM");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( lparamright);
                                            nd.setColumn(lparamleft);
                                            nd.addChildren((AST)lparam);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        :}
        |   E:exp   {:
                        AST nd = new AST();
                        nd.setLabel("LPARAM");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow(expright);
                        nd.setColumn(expleft);
                        nd.addChildren((AST)exp);

                        RESULT = nd;
                    :}
;

ASIGN   ::= id:n asign E:exp    {:
                                    AST ch1 = new AST();
                                    ch1.setLabel("ID");
                                    ch1.setIdNode(Parser.cont++);
                                    ch1.setRow( nright);
                                    ch1.setColumn(nleft);
                                    ch1.setValue(n);

                                    AST nd = new AST();
                                    nd.setLabel("ASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.setRow( nright);
                                    nd.setColumn(nleft);
                                    nd.addChildren(ch1);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                :}
        |   id:n LCOR:index asign E:exp {:
                                            AST ch1 = new AST();
                                            ch1.setLabel("ID");
                                            ch1.setIdNode(Parser.cont++);
                                            ch1.setRow( nright);
                                            ch1.setColumn(nleft);
                                            ch1.setValue(n);

                                            AST nd = new AST();
                                            nd.setLabel("ASIGN");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( nright);
                                            nd.setColumn(nleft);
                                            nd.addChildren(ch1);
                                            nd.addChildren((AST)index);
                                            nd.addChildren((AST)exp);

                                            RESULT = nd;
                                        :}
        |   MAT:mat asign E:exp {:
                                    AST nd = new AST();
                                    nd.setLabel("MATASIGN");
                                    nd.setIdNode(Parser.cont++);
                                    nd.setRow( matright);
                                    nd.setColumn(matleft);
                                    nd.addChildren((AST)mat);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                :}
;

LLAMAD  ::= id:val ipar LPARAM:lparam fpar  {:
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("Llam");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( valright);
                                            nd.setColumn(valleft);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)lparam);

                                            RESULT = nd;
                                        :}
    |   id:val ipar fpar    {:
                                AST n = new AST();
                                n.setLabel("Ref");
                                n.setIdNode(Parser.cont++);
                                n.setRow( valright);
                                n.setColumn(valleft);
                                n.setValue(val);

                                AST nd = new AST();
                                nd.setLabel("Llam");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( valright);
                                nd.setColumn(valleft);
                                nd.addChildren(n);

                                RESULT = nd;   
                            :}
;

MAT ::= id:val icor E:exp1 colon E:exp2 fcor  {:
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setRow( valright);
                                            n.setColumn(valleft);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT1");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( valright);
                                            nd.setColumn(valleft);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        :}
    |   id:val icor E:exp1 colon fcor  {:
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setRow( valright);
                                            n.setColumn(valleft);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT2");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( valright);
                                            nd.setColumn(valleft);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp1);

                                            RESULT = nd;
                                        :}
    |   id:val icor colon E:exp2 fcor  {:
                                            AST n = new AST();
                                            n.setLabel("Ref");
                                            n.setIdNode(Parser.cont++);
                                            n.setRow( valright);
                                            n.setColumn(valleft);
                                            n.setValue(val);

                                            AST nd = new AST();
                                            nd.setLabel("MAT3");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( valright);
                                            nd.setColumn(valleft);
                                            nd.addChildren(n);
                                            nd.addChildren((AST)exp2);

                                            RESULT = nd;
                                        :}
;

TRANS   ::= retrn:r {:
                        AST nd = new AST();
                        nd.setLabel("RETURN");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( rright);
                        nd.setColumn(rleft);
                        nd.setValue("return");

                        RESULT = nd;
                    :}
        |   retrn ipar E:exp fpar   {:
                                        AST nd = new AST();
                                        nd.setLabel("RETURN");
                                        nd.setIdNode(Parser.cont++);
                                        nd.setRow( expright);
                                        nd.setColumn(expleft);
                                        nd.addChildren((AST)exp);

                                        RESULT = nd;
                                    :}
        |   brek:b  {:
                        AST nd = new AST();
                        nd.setLabel("BREAK");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( bright);
                        nd.setColumn(bleft);
                        nd.setValue("break");

                        RESULT = nd;
                    :}
        |   cont:c  {:
                        AST nd = new AST();
                        nd.setLabel("CONTINUE");
                        nd.setIdNode(Parser.cont++);
                        nd.setRow( cright);
                        nd.setColumn(cleft);
                        nd.setValue("continue");

                        RESULT = nd;
                    :}
;

IF  ::= si ipar E:cond fpar illa LINST:linst flla   {:
                                                        AST nd = new AST();
                                                        nd.setLabel("IF");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.setRow( condright);
                                                        nd.setColumn(condleft);
                                                        nd.addChildren((AST)cond);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    :}
    |   si ipar E:cond fpar illa LINST:linstt flla sino illa LINST:linstf flla  {:
                                                                                    AST nd = new AST();
                                                                                    nd.setLabel("IF");
                                                                                    nd.setIdNode(Parser.cont++);
                                                                                    nd.setRow( condright);
                                                                                    nd.setColumn(condleft);
                                                                                    nd.addChildren((AST)cond);
                                                                                    nd.addChildren((AST)linstt);
                                                                                    nd.addChildren((AST)linstf);

                                                                                    RESULT = nd;
                                                                                :}
    |   si ipar E:cond fpar illa LINST:linstt flla LEI:lei sino illa LINST:linstf flla  {:
                                                                                            AST nd = new AST();
                                                                                            nd.setLabel("IF");
                                                                                            nd.setIdNode(Parser.cont++);
                                                                                            nd.setRow( condright);
                                                                                            nd.setColumn(condleft);
                                                                                            nd.addChildren((AST)cond);
                                                                                            nd.addChildren((AST)linstt);
                                                                                            nd.addChildren((AST)lei);
                                                                                            nd.addChildren((AST)linstf);

                                                                                            RESULT = nd;
                                                                                        :}
    |   si ipar E:cond fpar illa LINST:linstt flla LEI:lei  {:
                                                                AST nd = new AST();
                                                                nd.setLabel("IF");
                                                                nd.setIdNode(Parser.cont++);
                                                                nd.setRow( condright);
                                                                nd.setColumn(condleft);
                                                                nd.addChildren((AST)cond);
                                                                nd.addChildren((AST)linstt);
                                                                nd.addChildren((AST)lei);

                                                                RESULT = nd;
                                                            :}                                                                                        
;

LEI ::= LEI:lei EI:ei   {:
                            AST nd = new AST();
                            nd.setLabel("EI");
                            nd.setIdNode(Parser.cont++);
                            nd.setRow( leiright);
                            nd.setColumn(leileft);
                            nd.addChildren((AST)lei);
                            nd.addChildren((AST)ei);

                            RESULT = nd;
                        :}
    |   EI:ei   {:
                    AST nd = new AST();
                    nd.setLabel("EI");
                    nd.setIdNode(Parser.cont++);
                    nd.setRow( eiright);
                    nd.setColumn(eileft);
                    nd.addChildren((AST)ei);

                    RESULT = nd;
                :}
;

EI  ::= sino si ipar E:cond fpar illa LINST:linst flla  {:
                                                            AST nd = new AST();
                                                            nd.setLabel("IF");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.setRow( condright);
                                                            nd.setColumn(condleft);
                                                            nd.addChildren((AST)cond);
                                                            nd.addChildren((AST)linst);

                                                            RESULT = nd;
                                                        :}
;

SWITCH  ::= swit ipar E:exp fpar illa LCASE:lcase def dp LINST:linstf flla {:
                                                                                AST nd = new AST();
                                                                                nd.setLabel("SWITCH");
                                                                                nd.setIdNode(Parser.cont++);
                                                                                nd.setRow( expright);
                                                                                nd.setColumn(expleft);
                                                                                nd.addChildren((AST)exp);
                                                                                nd.addChildren((AST)lcase);
                                                                                nd.addChildren((AST)linstf);

                                                                                RESULT = nd;
                                                                            :}
        |   swit ipar E:exp fpar illa LCASE:lcase flla  {:
                                                            AST nd = new AST();
                                                            nd.setLabel("SWITCH");
                                                            nd.setIdNode(Parser.cont++);
                                                            nd.setRow( expright);
                                                            nd.setColumn(expleft);
                                                            nd.addChildren((AST)exp);
                                                            nd.addChildren((AST)lcase);                                                                                                                 

                                                            RESULT = nd;
                                                        :}
;

LCASE   ::= LCASE:lcase caso E:exp dp LINST:linst  {:
                                                        AST nd = new AST();
                                                        nd.setLabel("LCASE");
                                                        nd.setIdNode(Parser.cont++);
                                                        nd.setRow( lcaseright);
                                                        nd.setColumn(lcaseleft);
                                                        nd.addChildren((AST)lcase);
                                                        nd.addChildren((AST)exp);
                                                        nd.addChildren((AST)linst);

                                                        RESULT = nd;
                                                    :}
        |   caso E:exp dp LINST:linst  {:
                                            AST nd = new AST();
                                            nd.setLabel("LCASE");
                                            nd.setIdNode(Parser.cont++);
                                            nd.setRow( expright);
                                            nd.setColumn(expleft);
                                            nd.addChildren((AST)exp);
                                            nd.addChildren((AST)linst);

                                            RESULT = nd;
                                        :}
;

WHILE   ::= whil:w ipar E:cond fpar illa LINST:linst flla   {:
                                                                AST nd = new AST();
                                                                nd.setLabel("WHILE");
                                                                nd.setIdNode(Parser.cont++);
                                                                nd.setRow( wright);
                                                                nd.setColumn(wleft);
                                                                nd.addChildren((AST)cond);
                                                                nd.addChildren((AST)linst);

                                                                RESULT = nd;
                                                            :}
;

DO  ::= do_:d illa LINST:linst flla whil ipar E:cond fpar   {:
                                                                AST nd = new AST();
                                                                nd.setLabel("DO");
                                                                nd.setIdNode(Parser.cont++);
                                                                nd.setRow( dright);
                                                                nd.setColumn(dleft);
                                                                nd.addChildren((AST)linst);
                                                                nd.addChildren((AST)cond);

                                                                RESULT = nd;
                                                            :}
;

FOR ::= for_ ipar id:var in_ E:exp fpar illa LINST:linst flla   {:
                                                                    AST ch1 = new AST();
                                                                    ch1.setLabel("ID");
                                                                    ch1.setIdNode(Parser.cont++);
                                                                    ch1.setRow( varright);
                                                                    ch1.setColumn(varleft);
                                                                    ch1.setValue(var);

                                                                    AST nd = new AST();
                                                                    nd.setLabel("FOR");
                                                                    nd.setIdNode(Parser.cont++);
                                                                    nd.setRow( varright);
                                                                    nd.setColumn(varleft);
                                                                    nd.addChildren(ch1);
                                                                    nd.addChildren((AST)exp);
                                                                    nd.addChildren((AST)linst);

                                                                    RESULT = nd;
                                                                :}
;

FUNC    ::= id:var asign func ipar LPARAM2:lparam2 fpar illa LINST:linst flla   {:
                                                                                    AST ch1 = new AST();
                                                                                    ch1.setLabel("ID");
                                                                                    ch1.setIdNode(Parser.cont++);
                                                                                    ch1.setRow( varright);
                                                                                    ch1.setColumn(varleft);
                                                                                    ch1.setValue(var);

                                                                                    AST nd = new AST();
                                                                                    nd.setLabel("FUNC");
                                                                                    nd.setIdNode(Parser.cont++);
                                                                                    nd.setRow( varright);
                                                                                    nd.setColumn(varleft);
                                                                                    nd.addChildren(ch1);
                                                                                    nd.addChildren((AST)lparam2);
                                                                                    nd.addChildren((AST)linst);

                                                                                    RESULT = nd;
                                                                                :}
        |   id:var asign ipar LPARAM2:lparam2 fpar arrow illa LINST:linst flla  {:
                                                                                    AST ch1 = new AST();
                                                                                    ch1.setLabel("ID");
                                                                                    ch1.setIdNode(Parser.cont++);
                                                                                    ch1.setRow( varright);
                                                                                    ch1.setColumn(varleft);
                                                                                    ch1.setValue(var);

                                                                                    AST nd = new AST();
                                                                                    nd.setLabel("FUNC");
                                                                                    nd.setIdNode(Parser.cont++);
                                                                                    nd.setRow( varright);
                                                                                    nd.setColumn(varleft);
                                                                                    nd.addChildren(ch1);
                                                                                    nd.addChildren((AST)lparam2);
                                                                                    nd.addChildren((AST)linst);

                                                                                    RESULT = nd;
                                                                                :}
;

LPARAM2 ::= LPARAM2:lparam2 colon id:var {:
                                        AST ch1 = new AST();
                                        ch1.setLabel("ID");
                                        ch1.setIdNode(Parser.cont++);
                                        ch1.setRow( varright);
                                        ch1.setColumn(varleft);
                                        ch1.setValue(var);

                                        AST nd = new AST();
                                        nd.setLabel("LPARAM2");
                                        nd.setIdNode(Parser.cont++);
                                        nd.setRow( lparam2right);
                                        nd.setColumn(lparam2left);
                                        nd.addChildren((AST)lparam2);
                                        nd.addChildren(ch1);

                                        RESULT = nd;
                                    :}
        |   LPARAM2:lparam2 colon id:var asign E:exp {:
                                                    AST ch1 = new AST();
                                                    ch1.setLabel("ID");
                                                    ch1.setIdNode(Parser.cont++);
                                                    ch1.setRow( varright);
                                                    ch1.setColumn(varleft);
                                                    ch1.setValue(var);

                                                    AST nd = new AST();
                                                    nd.setLabel("LPARAM2");
                                                    nd.setIdNode(Parser.cont++);
                                                    nd.setRow( lparam2right);
                                                    nd.setColumn(lparam2left);
                                                    nd.addChildren((AST)lparam2);
                                                    nd.addChildren(ch1);
                                                    nd.addChildren((AST)exp);

                                                    RESULT = nd;
                                                :}
        |   id:var colon    {:
                                AST ch1 = new AST();
                                ch1.setLabel("ID");
                                ch1.setIdNode(Parser.cont++);
                                ch1.setRow( varright);
                                ch1.setColumn(varleft);
                                ch1.setValue(var);

                                AST nd = new AST();
                                nd.setLabel("LPARAM2");
                                nd.setIdNode(Parser.cont++);
                                nd.setRow( varright);
                                nd.setColumn(varleft);
                                nd.addChildren(ch1);

                                RESULT = nd;
                            :}
        |   id:var asign E:exp  {:
                                    AST ch1 = new AST();
                                    ch1.setLabel("ID");
                                    ch1.setIdNode(Parser.cont++);
                                    ch1.setRow(varright);
                                    ch1.setColumn(varleft);
                                    ch1.setValue(var);

                                    AST nd = new AST();
                                    nd.setLabel("LPARAM2");
                                    nd.setIdNode(Parser.cont++);
                                    nd.setColumn(varleft);
                                    nd.setRow(varright);
                                    nd.addChildren(ch1);
                                    nd.addChildren((AST)exp);

                                    RESULT = nd;
                                :}
;